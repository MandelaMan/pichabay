{"version":3,"file":"downshift.umd.min.js","sources":["../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../node_modules/@babel/runtime/helpers/esm/extends.js","../../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../../node_modules/react-is/cjs/react-is.production.min.js","../../node_modules/react-is/index.js","../../node_modules/compute-scroll-into-view/es/index.js","../../src/utils.js","../../src/set-a11y-status.js","../../src/stateChangeTypes.js","../../src/downshift.js","../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../../src/hooks/utils.js","../../src/hooks/useSelect/utils.js","../../src/hooks/useSelect/reducer.js","../../src/hooks/useSelect/index.js","../../src/hooks/useCombobox/stateChangeTypes.js","../../src/hooks/useCombobox/utils.js","../../src/hooks/useCombobox/reducer.js","../../src/hooks/useCombobox/index.js","../../src/hooks/useMultipleSelection/utils.js","../../src/hooks/useMultipleSelection/reducer.js","../../src/hooks/useMultipleSelection/index.js"],"sourcesContent":["export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?\nSymbol.for(\"react.suspense_list\"):60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.block\"):60121,w=b?Symbol.for(\"react.fundamental\"):60117,x=b?Symbol.for(\"react.responder\"):60118,y=b?Symbol.for(\"react.scope\"):60119;\nfunction z(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","function isElement(el) {\n  return el != null && typeof el === 'object' && el.nodeType === 1;\n}\n\nfunction canOverflow(overflow, skipOverflowHiddenElements) {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false;\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip';\n}\n\nfunction getFrameElement(el) {\n  if (!el.ownerDocument || !el.ownerDocument.defaultView) {\n    return null;\n  }\n\n  return el.ownerDocument.defaultView.frameElement;\n}\n\nfunction isHiddenByFrame(el) {\n  var frame = getFrameElement(el);\n\n  if (!frame) {\n    return false;\n  }\n\n  return frame.clientHeight < el.scrollHeight || frame.clientWidth < el.scrollWidth;\n}\n\nfunction isScrollable(el, skipOverflowHiddenElements) {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    var style = getComputedStyle(el, null);\n    return canOverflow(style.overflowY, skipOverflowHiddenElements) || canOverflow(style.overflowX, skipOverflowHiddenElements) || isHiddenByFrame(el);\n  }\n\n  return false;\n}\n\nfunction alignNearest(scrollingEdgeStart, scrollingEdgeEnd, scrollingSize, scrollingBorderStart, scrollingBorderEnd, elementEdgeStart, elementEdgeEnd, elementSize) {\n  if (elementEdgeStart < scrollingEdgeStart && elementEdgeEnd > scrollingEdgeEnd || elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd) {\n    return 0;\n  }\n\n  if (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize || elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart;\n  }\n\n  if (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize || elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd;\n  }\n\n  return 0;\n}\n\nexport default (function (target, options) {\n  var scrollMode = options.scrollMode,\n      block = options.block,\n      inline = options.inline,\n      boundary = options.boundary,\n      skipOverflowHiddenElements = options.skipOverflowHiddenElements;\n  var checkBoundary = typeof boundary === 'function' ? boundary : function (node) {\n    return node !== boundary;\n  };\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target');\n  }\n\n  var scrollingElement = document.scrollingElement || document.documentElement;\n  var frames = [];\n  var cursor = target;\n\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    cursor = cursor.parentNode;\n\n    if (cursor === scrollingElement) {\n      frames.push(cursor);\n      break;\n    }\n\n    if (cursor === document.body && isScrollable(cursor) && !isScrollable(document.documentElement)) {\n      continue;\n    }\n\n    if (isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor);\n    }\n  }\n\n  var viewportWidth = window.visualViewport ? visualViewport.width : innerWidth;\n  var viewportHeight = window.visualViewport ? visualViewport.height : innerHeight;\n  var viewportX = window.scrollX || pageXOffset;\n  var viewportY = window.scrollY || pageYOffset;\n\n  var _target$getBoundingCl = target.getBoundingClientRect(),\n      targetHeight = _target$getBoundingCl.height,\n      targetWidth = _target$getBoundingCl.width,\n      targetTop = _target$getBoundingCl.top,\n      targetRight = _target$getBoundingCl.right,\n      targetBottom = _target$getBoundingCl.bottom,\n      targetLeft = _target$getBoundingCl.left;\n\n  var targetBlock = block === 'start' || block === 'nearest' ? targetTop : block === 'end' ? targetBottom : targetTop + targetHeight / 2;\n  var targetInline = inline === 'center' ? targetLeft + targetWidth / 2 : inline === 'end' ? targetRight : targetLeft;\n  var computations = [];\n\n  for (var index = 0; index < frames.length; index++) {\n    var frame = frames[index];\n\n    var _frame$getBoundingCli = frame.getBoundingClientRect(),\n        height = _frame$getBoundingCli.height,\n        width = _frame$getBoundingCli.width,\n        top = _frame$getBoundingCli.top,\n        right = _frame$getBoundingCli.right,\n        bottom = _frame$getBoundingCli.bottom,\n        left = _frame$getBoundingCli.left;\n\n    if (scrollMode === 'if-needed' && targetTop >= 0 && targetLeft >= 0 && targetBottom <= viewportHeight && targetRight <= viewportWidth && targetTop >= top && targetBottom <= bottom && targetLeft >= left && targetRight <= right) {\n      return computations;\n    }\n\n    var frameStyle = getComputedStyle(frame);\n    var borderLeft = parseInt(frameStyle.borderLeftWidth, 10);\n    var borderTop = parseInt(frameStyle.borderTopWidth, 10);\n    var borderRight = parseInt(frameStyle.borderRightWidth, 10);\n    var borderBottom = parseInt(frameStyle.borderBottomWidth, 10);\n    var blockScroll = 0;\n    var inlineScroll = 0;\n    var scrollbarWidth = 'offsetWidth' in frame ? frame.offsetWidth - frame.clientWidth - borderLeft - borderRight : 0;\n    var scrollbarHeight = 'offsetHeight' in frame ? frame.offsetHeight - frame.clientHeight - borderTop - borderBottom : 0;\n\n    if (scrollingElement === frame) {\n      if (block === 'start') {\n        blockScroll = targetBlock;\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight;\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(viewportY, viewportY + viewportHeight, viewportHeight, borderTop, borderBottom, viewportY + targetBlock, viewportY + targetBlock + targetHeight, targetHeight);\n      } else {\n        blockScroll = targetBlock - viewportHeight / 2;\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline;\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2;\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth;\n      } else {\n        inlineScroll = alignNearest(viewportX, viewportX + viewportWidth, viewportWidth, borderLeft, borderRight, viewportX + targetInline, viewportX + targetInline + targetWidth, targetWidth);\n      }\n\n      blockScroll = Math.max(0, blockScroll + viewportY);\n      inlineScroll = Math.max(0, inlineScroll + viewportX);\n    } else {\n      if (block === 'start') {\n        blockScroll = targetBlock - top - borderTop;\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight;\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(top, bottom, height, borderTop, borderBottom + scrollbarHeight, targetBlock, targetBlock + targetHeight, targetHeight);\n      } else {\n        blockScroll = targetBlock - (top + height / 2) + scrollbarHeight / 2;\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - left - borderLeft;\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (left + width / 2) + scrollbarWidth / 2;\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth;\n      } else {\n        inlineScroll = alignNearest(left, right, width, borderLeft, borderRight + scrollbarWidth, targetInline, targetInline + targetWidth, targetWidth);\n      }\n\n      var scrollLeft = frame.scrollLeft,\n          scrollTop = frame.scrollTop;\n      blockScroll = Math.max(0, Math.min(scrollTop + blockScroll, frame.scrollHeight - height + scrollbarHeight));\n      inlineScroll = Math.max(0, Math.min(scrollLeft + inlineScroll, frame.scrollWidth - width + scrollbarWidth));\n      targetBlock += scrollTop - blockScroll;\n      targetInline += scrollLeft - inlineScroll;\n    }\n\n    computations.push({\n      el: frame,\n      top: blockScroll,\n      left: inlineScroll\n    });\n  }\n\n  return computations;\n});","import computeScrollIntoView from 'compute-scroll-into-view'\nimport {isPreact} from './is.macro'\n\nlet idCounter = 0\n\n/**\n * Accepts a parameter and returns it if it's a function\n * or a noop function if it's not. This allows us to\n * accept a callback, but not worry about it if it's not\n * passed.\n * @param {Function} cb the callback\n * @return {Function} a function\n */\nfunction cbToCb(cb) {\n  return typeof cb === 'function' ? cb : noop\n}\n\nfunction noop() {}\n\n/**\n * Scroll node into view if necessary\n * @param {HTMLElement} node the element that should scroll into view\n * @param {HTMLElement} menuNode the menu element of the component\n */\nfunction scrollIntoView(node, menuNode) {\n  if (node === null) {\n    return\n  }\n\n  const actions = computeScrollIntoView(node, {\n    boundary: menuNode,\n    block: 'nearest',\n    scrollMode: 'if-needed',\n  })\n  actions.forEach(({el, top, left}) => {\n    el.scrollTop = top\n    el.scrollLeft = left\n  })\n}\n\n/**\n * @param {HTMLElement} parent the parent node\n * @param {HTMLElement} child the child node\n * @return {Boolean} whether the parent is the child or the child is in the parent\n */\nfunction isOrContainsNode(parent, child) {\n  return parent === child || (parent.contains && parent.contains(child))\n}\n\n/**\n * Simple debounce implementation. Will call the given\n * function once after the time given has passed since\n * it was last called.\n * @param {Function} fn the function to call after the time\n * @param {Number} time the time to wait\n * @return {Function} the debounced function\n */\nfunction debounce(fn, time) {\n  let timeoutId\n\n  function cancel() {\n    if (timeoutId) {\n      clearTimeout(timeoutId)\n    }\n  }\n\n  function wrapper(...args) {\n    cancel()\n    timeoutId = setTimeout(() => {\n      timeoutId = null\n      fn(...args)\n    }, time)\n  }\n\n  wrapper.cancel = cancel\n\n  return wrapper\n}\n\n/**\n * This is intended to be used to compose event handlers.\n * They are executed in order until one of them sets\n * `event.preventDownshiftDefault = true`.\n * @param {...Function} fns the event handler functions\n * @return {Function} the event handler to add to an element\n */\nfunction callAllEventHandlers(...fns) {\n  return (event, ...args) =>\n    fns.some(fn => {\n      if (fn) {\n        fn(event, ...args)\n      }\n      return (\n        event.preventDownshiftDefault ||\n        (event.hasOwnProperty('nativeEvent') &&\n          event.nativeEvent.preventDownshiftDefault)\n      )\n    })\n}\n\nfunction handleRefs(...refs) {\n  return node => {\n    refs.forEach(ref => {\n      if (typeof ref === 'function') {\n        ref(node)\n      } else if (ref) {\n        ref.current = node\n      }\n    })\n  }\n}\n\n/**\n * This generates a unique ID for an instance of Downshift\n * @return {String} the unique ID\n */\nfunction generateId() {\n  return String(idCounter++)\n}\n\n/**\n * This is only used in tests\n * @param {Number} num the number to set the idCounter to\n */\nfunction setIdCounter(num) {\n  idCounter = num\n}\n\n/**\n * Resets idCounter to 0. Used for SSR.\n */\nfunction resetIdCounter() {\n  idCounter = 0\n}\n\n/**\n * Default implementation for status message. Only added when menu is open.\n * Will specift if there are results in the list, and if so, how many,\n * and what keys are relevant.\n *\n * @param {Object} param the downshift state and other relevant properties\n * @return {String} the a11y status message\n */\nfunction getA11yStatusMessage({isOpen, resultCount, previousResultCount}) {\n  if (!isOpen) {\n    return ''\n  }\n\n  if (!resultCount) {\n    return 'No results are available.'\n  }\n\n  if (resultCount !== previousResultCount) {\n    return `${resultCount} result${\n      resultCount === 1 ? ' is' : 's are'\n    } available, use up and down arrow keys to navigate. Press Enter key to select.`\n  }\n\n  return ''\n}\n\n/**\n * Takes an argument and if it's an array, returns the first item in the array\n * otherwise returns the argument\n * @param {*} arg the maybe-array\n * @param {*} defaultValue the value if arg is falsey not defined\n * @return {*} the arg or it's first item\n */\nfunction unwrapArray(arg, defaultValue) {\n  arg = Array.isArray(arg) ? /* istanbul ignore next (preact) */ arg[0] : arg\n  if (!arg && defaultValue) {\n    return defaultValue\n  } else {\n    return arg\n  }\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Boolean} whether it's a DOM element\n */\nfunction isDOMElement(element) {\n  /* istanbul ignore if */\n  if (isPreact) {\n    // then this is preact or preact X\n    return (\n      typeof element.type === 'string' || typeof element.nodeName === 'string'\n    )\n  }\n\n  // then we assume this is react\n  return typeof element.type === 'string'\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Object} the props\n */\nfunction getElementProps(element) {\n  // props for react, attributes for preact\n\n  /* istanbul ignore if */\n  if (isPreact) {\n    return element.props || element.attributes\n  }\n\n  return element.props\n}\n\n/**\n * Throws a helpful error message for required properties. Useful\n * to be used as a default in destructuring or object params.\n * @param {String} fnName the function name\n * @param {String} propName the prop name\n */\nfunction requiredProp(fnName, propName) {\n  // eslint-disable-next-line no-console\n  console.error(`The property \"${propName}\" is required in \"${fnName}\"`)\n}\n\nconst stateKeys = [\n  'highlightedIndex',\n  'inputValue',\n  'isOpen',\n  'selectedItem',\n  'type',\n]\n/**\n * @param {Object} state the state object\n * @return {Object} state that is relevant to downshift\n */\nfunction pickState(state = {}) {\n  const result = {}\n  stateKeys.forEach(k => {\n    if (state.hasOwnProperty(k)) {\n      result[k] = state[k]\n    }\n  })\n  return result\n}\n\n/**\n * This will perform a shallow merge of the given state object\n * with the state coming from props\n * (for the controlled component scenario)\n * This is used in state updater functions so they're referencing\n * the right state regardless of where it comes from.\n *\n * @param {Object} state The state of the component/hook.\n * @param {Object} props The props that may contain controlled values.\n * @returns {Object} The merged controlled state.\n */\nfunction getState(state, props) {\n  return Object.keys(state).reduce((prevState, key) => {\n    prevState[key] = isControlledProp(props, key) ? props[key] : state[key]\n\n    return prevState\n  }, {})\n}\n\n/**\n * This determines whether a prop is a \"controlled prop\" meaning it is\n * state which is controlled by the outside of this component rather\n * than within this component.\n *\n * @param {Object} props The props that may contain controlled values.\n * @param {String} key the key to check\n * @return {Boolean} whether it is a controlled controlled prop\n */\nfunction isControlledProp(props, key) {\n  return props[key] !== undefined\n}\n\n/**\n * Normalizes the 'key' property of a KeyboardEvent in IE/Edge\n * @param {Object} event a keyboardEvent object\n * @return {String} keyboard key\n */\nfunction normalizeArrowKey(event) {\n  const {key, keyCode} = event\n  /* istanbul ignore next (ie) */\n  if (keyCode >= 37 && keyCode <= 40 && key.indexOf('Arrow') !== 0) {\n    return `Arrow${key}`\n  }\n  return key\n}\n\n/**\n * Simple check if the value passed is object literal\n * @param {*} obj any things\n * @return {Boolean} whether it's object literal\n */\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]'\n}\n\n/**\n * Returns the new index in the list, in a circular way. If next value is out of bonds from the total,\n * it will wrap to either 0 or itemCount - 1.\n *\n * @param {number} moveAmount Number of positions to move. Negative to move backwards, positive forwards.\n * @param {number} baseIndex The initial position to move from.\n * @param {number} itemCount The total number of items.\n * @param {Function} getItemNodeFromIndex Used to check if item is disabled.\n * @param {boolean} circular Specify if navigation is circular. Default is true.\n * @returns {number} The new index after the move.\n */\nfunction getNextWrappingIndex(\n  moveAmount,\n  baseIndex,\n  itemCount,\n  getItemNodeFromIndex,\n  circular = true,\n) {\n  const itemsLastIndex = itemCount - 1\n\n  if (\n    typeof baseIndex !== 'number' ||\n    baseIndex < 0 ||\n    baseIndex >= itemCount\n  ) {\n    baseIndex = moveAmount > 0 ? -1 : itemsLastIndex + 1\n  }\n\n  let newIndex = baseIndex + moveAmount\n\n  if (newIndex < 0) {\n    newIndex = circular ? itemsLastIndex : 0\n  } else if (newIndex > itemsLastIndex) {\n    newIndex = circular ? 0 : itemsLastIndex\n  }\n\n  const nonDisabledNewIndex = getNextNonDisabledIndex(\n    moveAmount,\n    newIndex,\n    itemCount,\n    getItemNodeFromIndex,\n    circular,\n  )\n\n  return nonDisabledNewIndex === -1 ? baseIndex : nonDisabledNewIndex\n}\n\n/**\n * Returns the next index in the list of an item that is not disabled.\n *\n * @param {number} moveAmount Number of positions to move. Negative to move backwards, positive forwards.\n * @param {number} baseIndex The initial position to move from.\n * @param {number} itemCount The total number of items.\n * @param {Function} getItemNodeFromIndex Used to check if item is disabled.\n * @param {boolean} circular Specify if navigation is circular. Default is true.\n * @returns {number} The new index. Returns baseIndex if item is not disabled. Returns next non-disabled item otherwise. If no non-disabled found it will return -1.\n */\nfunction getNextNonDisabledIndex(\n  moveAmount,\n  baseIndex,\n  itemCount,\n  getItemNodeFromIndex,\n  circular,\n) {\n  const currentElementNode = getItemNodeFromIndex(baseIndex)\n  if (!currentElementNode || !currentElementNode.hasAttribute('disabled')) {\n    return baseIndex\n  }\n\n  if (moveAmount > 0) {\n    for (let index = baseIndex + 1; index < itemCount; index++) {\n      if (!getItemNodeFromIndex(index).hasAttribute('disabled')) {\n        return index\n      }\n    }\n  } else {\n    for (let index = baseIndex - 1; index >= 0; index--) {\n      if (!getItemNodeFromIndex(index).hasAttribute('disabled')) {\n        return index\n      }\n    }\n  }\n\n  if (circular) {\n    return moveAmount > 0\n      ? getNextNonDisabledIndex(1, 0, itemCount, getItemNodeFromIndex, false)\n      : getNextNonDisabledIndex(\n          -1,\n          itemCount - 1,\n          itemCount,\n          getItemNodeFromIndex,\n          false,\n        )\n  }\n\n  return -1\n}\n\n/**\n * Checks if event target is within the downshift elements.\n *\n * @param {EventTarget} target Target to check.\n * @param {HTMLElement[]} downshiftElements The elements that form downshift (list, toggle button etc).\n * @param {Document} document The document.\n * @param {boolean} checkActiveElement Whether to also check activeElement.\n *\n * @returns {boolean} Whether or not the target is within downshift elements.\n */\nfunction targetWithinDownshift(\n  target,\n  downshiftElements,\n  document,\n  checkActiveElement = true,\n) {\n  return downshiftElements.some(\n    contextNode =>\n      contextNode &&\n      (isOrContainsNode(contextNode, target) ||\n        (checkActiveElement &&\n          isOrContainsNode(contextNode, document.activeElement))),\n  )\n}\n\nexport {\n  cbToCb,\n  callAllEventHandlers,\n  handleRefs,\n  debounce,\n  scrollIntoView,\n  generateId,\n  getA11yStatusMessage,\n  unwrapArray,\n  isDOMElement,\n  getElementProps,\n  noop,\n  requiredProp,\n  setIdCounter,\n  resetIdCounter,\n  pickState,\n  isPlainObject,\n  normalizeArrowKey,\n  getNextWrappingIndex,\n  getNextNonDisabledIndex,\n  targetWithinDownshift,\n  getState,\n  isControlledProp,\n}\n","import {debounce} from './utils'\n\nconst cleanupStatus = debounce(() => {\n  getStatusDiv().textContent = ''\n}, 500)\n\n/**\n * @param {String} status the status message\n * @param {Object} documentProp document passed by the user.\n */\nfunction setStatus(status, documentProp) {\n  const div = getStatusDiv(documentProp)\n  if (!status) {\n    return\n  }\n\n  div.textContent = status\n  cleanupStatus()\n}\n\n/**\n * Get the status node or create it if it does not already exist.\n * @param {Object} documentProp document passed by the user.\n * @return {HTMLElement} the status node.\n */\nfunction getStatusDiv(documentProp = document) {\n  let statusDiv = documentProp.getElementById('a11y-status-message')\n  if (statusDiv) {\n    return statusDiv\n  }\n\n  statusDiv = documentProp.createElement('div')\n  statusDiv.setAttribute('id', 'a11y-status-message')\n  statusDiv.setAttribute('role', 'status')\n  statusDiv.setAttribute('aria-live', 'polite')\n  statusDiv.setAttribute('aria-relevant', 'additions text')\n  Object.assign(statusDiv.style, {\n    border: '0',\n    clip: 'rect(0 0 0 0)',\n    height: '1px',\n    margin: '-1px',\n    overflow: 'hidden',\n    padding: '0',\n    position: 'absolute',\n    width: '1px',\n  })\n  documentProp.body.appendChild(statusDiv)\n  return statusDiv\n}\n\nexport default setStatus\n","import productionEnum from './productionEnum.macro'\n\nexport const unknown = productionEnum('__autocomplete_unknown__')\nexport const mouseUp = productionEnum('__autocomplete_mouseup__')\nexport const itemMouseEnter = productionEnum('__autocomplete_item_mouseenter__')\nexport const keyDownArrowUp = productionEnum(\n  '__autocomplete_keydown_arrow_up__',\n)\nexport const keyDownArrowDown = productionEnum(\n  '__autocomplete_keydown_arrow_down__',\n)\nexport const keyDownEscape = productionEnum('__autocomplete_keydown_escape__')\nexport const keyDownEnter = productionEnum('__autocomplete_keydown_enter__')\nexport const keyDownHome = productionEnum('__autocomplete_keydown_home__')\nexport const keyDownEnd = productionEnum('__autocomplete_keydown_end__')\nexport const clickItem = productionEnum('__autocomplete_click_item__')\nexport const blurInput = productionEnum('__autocomplete_blur_input__')\nexport const changeInput = productionEnum('__autocomplete_change_input__')\nexport const keyDownSpaceButton = productionEnum(\n  '__autocomplete_keydown_space_button__',\n)\nexport const clickButton = productionEnum('__autocomplete_click_button__')\nexport const blurButton = productionEnum('__autocomplete_blur_button__')\nexport const controlledPropUpdatedSelectedItem = productionEnum(\n  '__autocomplete_controlled_prop_updated_selected_item__',\n)\nexport const touchEnd = productionEnum('__autocomplete_touchend__')\n","/* eslint camelcase:0 */\n\nimport PropTypes from 'prop-types'\nimport {Component, cloneElement} from 'react'\nimport {isForwardRef} from 'react-is'\nimport {isPreact, isReactNative} from './is.macro'\nimport setA11yStatus from './set-a11y-status'\nimport * as stateChangeTypes from './stateChangeTypes'\nimport {\n  handleRefs,\n  callAllEventHandlers,\n  cbToCb,\n  debounce,\n  generateId,\n  getA11yStatusMessage,\n  getElementProps,\n  isDOMElement,\n  targetWithinDownshift,\n  isPlainObject,\n  noop,\n  normalizeArrowKey,\n  pickState,\n  requiredProp,\n  scrollIntoView,\n  unwrapArray,\n  getNextWrappingIndex,\n  getNextNonDisabledIndex,\n  getState,\n  isControlledProp,\n} from './utils'\n\nclass Downshift extends Component {\n  static propTypes = {\n    children: PropTypes.func,\n    defaultHighlightedIndex: PropTypes.number,\n    defaultIsOpen: PropTypes.bool,\n    initialHighlightedIndex: PropTypes.number,\n    initialSelectedItem: PropTypes.any,\n    initialInputValue: PropTypes.string,\n    initialIsOpen: PropTypes.bool,\n    getA11yStatusMessage: PropTypes.func,\n    itemToString: PropTypes.func,\n    onChange: PropTypes.func,\n    onSelect: PropTypes.func,\n    onStateChange: PropTypes.func,\n    onInputValueChange: PropTypes.func,\n    onUserAction: PropTypes.func,\n    onOuterClick: PropTypes.func,\n    selectedItemChanged: PropTypes.func,\n    stateReducer: PropTypes.func,\n    itemCount: PropTypes.number,\n    id: PropTypes.string,\n    environment: PropTypes.shape({\n      addEventListener: PropTypes.func,\n      removeEventListener: PropTypes.func,\n      document: PropTypes.shape({\n        getElementById: PropTypes.func,\n        activeElement: PropTypes.any,\n        body: PropTypes.any,\n      }),\n    }),\n    suppressRefError: PropTypes.bool,\n    scrollIntoView: PropTypes.func,\n    // things we keep in state for uncontrolled components\n    // but can accept as props for controlled components\n    /* eslint-disable react/no-unused-prop-types */\n    selectedItem: PropTypes.any,\n    isOpen: PropTypes.bool,\n    inputValue: PropTypes.string,\n    highlightedIndex: PropTypes.number,\n    labelId: PropTypes.string,\n    inputId: PropTypes.string,\n    menuId: PropTypes.string,\n    getItemId: PropTypes.func,\n    /* eslint-enable react/no-unused-prop-types */\n  }\n\n  static defaultProps = {\n    defaultHighlightedIndex: null,\n    defaultIsOpen: false,\n    getA11yStatusMessage,\n    itemToString: i => {\n      if (i == null) {\n        return ''\n      }\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        isPlainObject(i) &&\n        !i.hasOwnProperty('toString')\n      ) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          'downshift: An object was passed to the default implementation of `itemToString`. You should probably provide your own `itemToString` implementation. Please refer to the `itemToString` API documentation.',\n          'The object that was passed:',\n          i,\n        )\n      }\n      return String(i)\n    },\n    onStateChange: noop,\n    onInputValueChange: noop,\n    onUserAction: noop,\n    onChange: noop,\n    onSelect: noop,\n    onOuterClick: noop,\n    selectedItemChanged: (prevItem, item) => prevItem !== item,\n    environment:\n      typeof window === 'undefined' /* istanbul ignore next (ssr) */\n        ? {}\n        : window,\n    stateReducer: (state, stateToSet) => stateToSet,\n    suppressRefError: false,\n    scrollIntoView,\n  }\n\n  static stateChangeTypes = stateChangeTypes\n\n  constructor(props) {\n    super(props)\n    // fancy destructuring + defaults + aliases\n    // this basically says each value of state should either be set to\n    // the initial value or the default value if the initial value is not provided\n    const {\n      defaultHighlightedIndex,\n      initialHighlightedIndex: highlightedIndex = defaultHighlightedIndex,\n      defaultIsOpen,\n      initialIsOpen: isOpen = defaultIsOpen,\n      initialInputValue: inputValue = '',\n      initialSelectedItem: selectedItem = null,\n    } = this.props\n    const state = this.getState({\n      highlightedIndex,\n      isOpen,\n      inputValue,\n      selectedItem,\n    })\n    if (\n      state.selectedItem != null &&\n      this.props.initialInputValue === undefined\n    ) {\n      state.inputValue = this.props.itemToString(state.selectedItem)\n    }\n    this.state = state\n  }\n\n  id = this.props.id || `downshift-${generateId()}`\n  menuId = this.props.menuId || `${this.id}-menu`\n  labelId = this.props.labelId || `${this.id}-label`\n  inputId = this.props.inputId || `${this.id}-input`\n  getItemId = this.props.getItemId || (index => `${this.id}-item-${index}`)\n\n  input = null\n  items = []\n  // itemCount can be changed asynchronously\n  // from within downshift (so it can't come from a prop)\n  // this is why we store it as an instance and use\n  // getItemCount rather than just use items.length\n  // (to support windowing + async)\n  itemCount = null\n  previousResultCount = 0\n\n  timeoutIds = []\n\n  /**\n   * @param {Function} fn the function to call after the time\n   * @param {Number} time the time to wait\n   */\n  internalSetTimeout = (fn, time) => {\n    const id = setTimeout(() => {\n      this.timeoutIds = this.timeoutIds.filter(i => i !== id)\n      fn()\n    }, time)\n\n    this.timeoutIds.push(id)\n  }\n\n  /**\n   * Clear all running timeouts\n   */\n  internalClearTimeouts() {\n    this.timeoutIds.forEach(id => {\n      clearTimeout(id)\n    })\n\n    this.timeoutIds = []\n  }\n\n  /**\n   * Gets the state based on internal state or props\n   * If a state value is passed via props, then that\n   * is the value given, otherwise it's retrieved from\n   * stateToMerge\n   *\n   * @param {Object} stateToMerge defaults to this.state\n   * @return {Object} the state\n   */\n  getState(stateToMerge = this.state) {\n    return getState(stateToMerge, this.props)\n  }\n\n  getItemCount() {\n    // things read better this way. They're in priority order:\n    // 1. `this.itemCount`\n    // 2. `this.props.itemCount`\n    // 3. `this.items.length`\n    let itemCount = this.items.length\n    if (this.itemCount != null) {\n      itemCount = this.itemCount\n    } else if (this.props.itemCount !== undefined) {\n      itemCount = this.props.itemCount\n    }\n    return itemCount\n  }\n\n  setItemCount = count => {\n    this.itemCount = count\n  }\n\n  unsetItemCount = () => {\n    this.itemCount = null\n  }\n\n  getItemNodeFromIndex(index) {\n    return this.props.environment.document.getElementById(this.getItemId(index))\n  }\n\n  setHighlightedIndex = (\n    highlightedIndex = this.props.defaultHighlightedIndex,\n    otherStateToSet = {},\n  ) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState({highlightedIndex, ...otherStateToSet})\n  }\n\n  scrollHighlightedItemIntoView() {\n    /* istanbul ignore else (react-native) */\n    if (!isReactNative) {\n      const node = this.getItemNodeFromIndex(this.getState().highlightedIndex)\n      this.props.scrollIntoView(node, this._menuNode)\n    }\n  }\n\n  moveHighlightedIndex(amount, otherStateToSet) {\n    const itemCount = this.getItemCount()\n    const {highlightedIndex} = this.getState()\n    if (itemCount > 0) {\n      const nextHighlightedIndex = getNextWrappingIndex(\n        amount,\n        highlightedIndex,\n        itemCount,\n        index => this.getItemNodeFromIndex(index),\n      )\n      this.setHighlightedIndex(nextHighlightedIndex, otherStateToSet)\n    }\n  }\n\n  clearSelection = cb => {\n    this.internalSetState(\n      {\n        selectedItem: null,\n        inputValue: '',\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        isOpen: this.props.defaultIsOpen,\n      },\n      cb,\n    )\n  }\n\n  selectItem = (item, otherStateToSet, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      {\n        isOpen: this.props.defaultIsOpen,\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        selectedItem: item,\n        inputValue: this.props.itemToString(item),\n        ...otherStateToSet,\n      },\n      cb,\n    )\n  }\n\n  selectItemAtIndex = (itemIndex, otherStateToSet, cb) => {\n    const item = this.items[itemIndex]\n    if (item == null) {\n      return\n    }\n    this.selectItem(item, otherStateToSet, cb)\n  }\n\n  selectHighlightedItem = (otherStateToSet, cb) => {\n    return this.selectItemAtIndex(\n      this.getState().highlightedIndex,\n      otherStateToSet,\n      cb,\n    )\n  }\n\n  // any piece of our state can live in two places:\n  // 1. Uncontrolled: it's internal (this.state)\n  //    We will call this.setState to update that state\n  // 2. Controlled: it's external (this.props)\n  //    We will call this.props.onStateChange to update that state\n  //\n  // In addition, we'll call this.props.onChange if the\n  // selectedItem is changed.\n  internalSetState = (stateToSet, cb) => {\n    let isItemSelected, onChangeArg\n\n    const onStateChangeArg = {}\n    const isStateToSetFunction = typeof stateToSet === 'function'\n\n    // we want to call `onInputValueChange` before the `setState` call\n    // so someone controlling the `inputValue` state gets notified of\n    // the input change as soon as possible. This avoids issues with\n    // preserving the cursor position.\n    // See https://github.com/downshift-js/downshift/issues/217 for more info.\n    if (!isStateToSetFunction && stateToSet.hasOwnProperty('inputValue')) {\n      this.props.onInputValueChange(stateToSet.inputValue, {\n        ...this.getStateAndHelpers(),\n        ...stateToSet,\n      })\n    }\n    return this.setState(\n      state => {\n        state = this.getState(state)\n        let newStateToSet = isStateToSetFunction\n          ? stateToSet(state)\n          : stateToSet\n\n        // Your own function that could modify the state that will be set.\n        newStateToSet = this.props.stateReducer(state, newStateToSet)\n\n        // checks if an item is selected, regardless of if it's different from\n        // what was selected before\n        // used to determine if onSelect and onChange callbacks should be called\n        isItemSelected = newStateToSet.hasOwnProperty('selectedItem')\n        // this keeps track of the object we want to call with setState\n        const nextState = {}\n        // this is just used to tell whether the state changed\n        const nextFullState = {}\n        // we need to call on change if the outside world is controlling any of our state\n        // and we're trying to update that state. OR if the selection has changed and we're\n        // trying to update the selection\n        if (\n          isItemSelected &&\n          newStateToSet.selectedItem !== state.selectedItem\n        ) {\n          onChangeArg = newStateToSet.selectedItem\n        }\n        newStateToSet.type = newStateToSet.type || stateChangeTypes.unknown\n\n        Object.keys(newStateToSet).forEach(key => {\n          // onStateChangeArg should only have the state that is\n          // actually changing\n          if (state[key] !== newStateToSet[key]) {\n            onStateChangeArg[key] = newStateToSet[key]\n          }\n          // the type is useful for the onStateChangeArg\n          // but we don't actually want to set it in internal state.\n          // this is an undocumented feature for now... Not all internalSetState\n          // calls support it and I'm not certain we want them to yet.\n          // But it enables users controlling the isOpen state to know when\n          // the isOpen state changes due to mouseup events which is quite handy.\n          if (key === 'type') {\n            return\n          }\n          nextFullState[key] = newStateToSet[key]\n          // if it's coming from props, then we don't care to set it internally\n          if (!isControlledProp(this.props, key)) {\n            nextState[key] = newStateToSet[key]\n          }\n        })\n\n        // if stateToSet is a function, then we weren't able to call onInputValueChange\n        // earlier, so we'll call it now that we know what the inputValue state will be.\n        if (\n          isStateToSetFunction &&\n          newStateToSet.hasOwnProperty('inputValue')\n        ) {\n          this.props.onInputValueChange(newStateToSet.inputValue, {\n            ...this.getStateAndHelpers(),\n            ...newStateToSet,\n          })\n        }\n\n        return nextState\n      },\n      () => {\n        // call the provided callback if it's a function\n        cbToCb(cb)()\n\n        // only call the onStateChange and onChange callbacks if\n        // we have relevant information to pass them.\n        const hasMoreStateThanType = Object.keys(onStateChangeArg).length > 1\n        if (hasMoreStateThanType) {\n          this.props.onStateChange(onStateChangeArg, this.getStateAndHelpers())\n        }\n\n        if (isItemSelected) {\n          this.props.onSelect(\n            stateToSet.selectedItem,\n            this.getStateAndHelpers(),\n          )\n        }\n\n        if (onChangeArg !== undefined) {\n          this.props.onChange(onChangeArg, this.getStateAndHelpers())\n        }\n        // this is currently undocumented and therefore subject to change\n        // We'll try to not break it, but just be warned.\n        this.props.onUserAction(onStateChangeArg, this.getStateAndHelpers())\n      },\n    )\n  }\n\n  getStateAndHelpers() {\n    const {highlightedIndex, inputValue, selectedItem, isOpen} = this.getState()\n    const {itemToString} = this.props\n    const {id} = this\n    const {\n      getRootProps,\n      getToggleButtonProps,\n      getLabelProps,\n      getMenuProps,\n      getInputProps,\n      getItemProps,\n      openMenu,\n      closeMenu,\n      toggleMenu,\n      selectItem,\n      selectItemAtIndex,\n      selectHighlightedItem,\n      setHighlightedIndex,\n      clearSelection,\n      clearItems,\n      reset,\n      setItemCount,\n      unsetItemCount,\n      internalSetState: setState,\n    } = this\n    return {\n      // prop getters\n      getRootProps,\n      getToggleButtonProps,\n      getLabelProps,\n      getMenuProps,\n      getInputProps,\n      getItemProps,\n\n      // actions\n      reset,\n      openMenu,\n      closeMenu,\n      toggleMenu,\n      selectItem,\n      selectItemAtIndex,\n      selectHighlightedItem,\n      setHighlightedIndex,\n      clearSelection,\n      clearItems,\n      setItemCount,\n      unsetItemCount,\n      setState,\n\n      // props\n      itemToString,\n\n      // derived\n      id,\n\n      // state\n      highlightedIndex,\n      inputValue,\n      isOpen,\n      selectedItem,\n    }\n  }\n\n  //////////////////////////// ROOT\n\n  rootRef = node => (this._rootNode = node)\n\n  getRootProps = (\n    {refKey = 'ref', ref, ...rest} = {},\n    {suppressRefError = false} = {},\n  ) => {\n    // this is used in the render to know whether the user has called getRootProps.\n    // It uses that to know whether to apply the props automatically\n    this.getRootProps.called = true\n    this.getRootProps.refKey = refKey\n    this.getRootProps.suppressRefError = suppressRefError\n    const {isOpen} = this.getState()\n    return {\n      [refKey]: handleRefs(ref, this.rootRef),\n      role: 'combobox',\n      'aria-expanded': isOpen,\n      'aria-haspopup': 'listbox',\n      'aria-owns': isOpen ? this.menuId : null,\n      'aria-labelledby': this.labelId,\n      ...rest,\n    }\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ROOT\n\n  keyDownHandlers = {\n    ArrowDown(event) {\n      event.preventDefault()\n\n      if (this.getState().isOpen) {\n        const amount = event.shiftKey ? 5 : 1\n        this.moveHighlightedIndex(amount, {\n          type: stateChangeTypes.keyDownArrowDown,\n        })\n      } else {\n        this.internalSetState(\n          {\n            isOpen: true,\n            type: stateChangeTypes.keyDownArrowDown,\n          },\n          () => {\n            const itemCount = this.getItemCount()\n            if (itemCount > 0) {\n              const {highlightedIndex} = this.getState()\n              const nextHighlightedIndex = getNextWrappingIndex(\n                1,\n                highlightedIndex,\n                itemCount,\n                index => this.getItemNodeFromIndex(index),\n              )\n\n              this.setHighlightedIndex(nextHighlightedIndex, {\n                type: stateChangeTypes.keyDownArrowDown,\n              })\n            }\n          },\n        )\n      }\n    },\n\n    ArrowUp(event) {\n      event.preventDefault()\n\n      if (this.getState().isOpen) {\n        const amount = event.shiftKey ? -5 : -1\n        this.moveHighlightedIndex(amount, {\n          type: stateChangeTypes.keyDownArrowUp,\n        })\n      } else {\n        this.internalSetState(\n          {\n            isOpen: true,\n            type: stateChangeTypes.keyDownArrowUp,\n          },\n          () => {\n            const itemCount = this.getItemCount()\n            if (itemCount > 0) {\n              const {highlightedIndex} = this.getState()\n              const nextHighlightedIndex = getNextWrappingIndex(\n                -1,\n                highlightedIndex,\n                itemCount,\n                index => this.getItemNodeFromIndex(index),\n              )\n\n              this.setHighlightedIndex(nextHighlightedIndex, {\n                type: stateChangeTypes.keyDownArrowUp,\n              })\n            }\n          },\n        )\n      }\n    },\n\n    Enter(event) {\n      if (event.which === 229) {\n        return\n      }\n\n      const {isOpen, highlightedIndex} = this.getState()\n      if (isOpen && highlightedIndex != null) {\n        event.preventDefault()\n        const item = this.items[highlightedIndex]\n        const itemNode = this.getItemNodeFromIndex(highlightedIndex)\n        if (item == null || (itemNode && itemNode.hasAttribute('disabled'))) {\n          return\n        }\n        this.selectHighlightedItem({\n          type: stateChangeTypes.keyDownEnter,\n        })\n      }\n    },\n\n    Escape(event) {\n      event.preventDefault()\n      this.reset({\n        type: stateChangeTypes.keyDownEscape,\n        selectedItem: null,\n        inputValue: '',\n      })\n    },\n  }\n\n  //////////////////////////// BUTTON\n\n  buttonKeyDownHandlers = {\n    ...this.keyDownHandlers,\n\n    ' '(event) {\n      event.preventDefault()\n      this.toggleMenu({type: stateChangeTypes.keyDownSpaceButton})\n    },\n  }\n\n  inputKeyDownHandlers = {\n    ...this.keyDownHandlers,\n    Home(event) {\n      event.preventDefault()\n\n      const itemCount = this.getItemCount()\n      const {isOpen} = this.getState()\n\n      if (itemCount <= 0 || !isOpen) {\n        return\n      }\n\n      // get next non-disabled starting downwards from 0 if that's disabled.\n      const newHighlightedIndex = getNextNonDisabledIndex(\n        1,\n        0,\n        itemCount,\n        index => this.getItemNodeFromIndex(index),\n        false,\n      )\n\n      this.setHighlightedIndex(newHighlightedIndex, {\n        type: stateChangeTypes.keyDownHome,\n      })\n    },\n\n    End(event) {\n      event.preventDefault()\n\n      const itemCount = this.getItemCount()\n      const {isOpen} = this.getState()\n\n      if (itemCount <= 0 || !isOpen) {\n        return\n      }\n\n      // get next non-disabled starting upwards from last index if that's disabled.\n      const newHighlightedIndex = getNextNonDisabledIndex(\n        -1,\n        itemCount - 1,\n        itemCount,\n        index => this.getItemNodeFromIndex(index),\n        false,\n      )\n\n      this.setHighlightedIndex(newHighlightedIndex, {\n        type: stateChangeTypes.keyDownEnd,\n      })\n    },\n  }\n\n  getToggleButtonProps = ({\n    onClick,\n    onPress,\n    onKeyDown,\n    onKeyUp,\n    onBlur,\n    ...rest\n  } = {}) => {\n    const {isOpen} = this.getState()\n    const enabledEventHandlers = isReactNative\n      ? /* istanbul ignore next (react-native) */\n        {\n          onPress: callAllEventHandlers(onPress, this.buttonHandleClick),\n        }\n      : {\n          onClick: callAllEventHandlers(onClick, this.buttonHandleClick),\n          onKeyDown: callAllEventHandlers(onKeyDown, this.buttonHandleKeyDown),\n          onKeyUp: callAllEventHandlers(onKeyUp, this.buttonHandleKeyUp),\n          onBlur: callAllEventHandlers(onBlur, this.buttonHandleBlur),\n        }\n    const eventHandlers = rest.disabled ? {} : enabledEventHandlers\n    return {\n      type: 'button',\n      role: 'button',\n      'aria-label': isOpen ? 'close menu' : 'open menu',\n      'aria-haspopup': true,\n      'data-toggle': true,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n\n  buttonHandleKeyUp = event => {\n    // Prevent click event from emitting in Firefox\n    event.preventDefault()\n  }\n\n  buttonHandleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (this.buttonKeyDownHandlers[key]) {\n      this.buttonKeyDownHandlers[key].call(this, event)\n    }\n  }\n\n  buttonHandleClick = event => {\n    event.preventDefault()\n    // handle odd case for Safari and Firefox which\n    // don't give the button the focus properly.\n    /* istanbul ignore if (can't reasonably test this) */\n    if (\n      !isReactNative &&\n      this.props.environment.document.activeElement ===\n        this.props.environment.document.body\n    ) {\n      event.target.focus()\n    }\n    // to simplify testing components that use downshift, we'll not wrap this in a setTimeout\n    // if the NODE_ENV is test. With the proper build system, this should be dead code eliminated\n    // when building for production and should therefore have no impact on production code.\n    if (process.env.NODE_ENV === 'test') {\n      this.toggleMenu({type: stateChangeTypes.clickButton})\n    } else {\n      // Ensure that toggle of menu occurs after the potential blur event in iOS\n      this.internalSetTimeout(() =>\n        this.toggleMenu({type: stateChangeTypes.clickButton}),\n      )\n    }\n  }\n\n  buttonHandleBlur = event => {\n    const blurTarget = event.target // Save blur target for comparison with activeElement later\n    // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not body element\n    this.internalSetTimeout(() => {\n      if (\n        !this.isMouseDown &&\n        (this.props.environment.document.activeElement == null ||\n          this.props.environment.document.activeElement.id !== this.inputId) &&\n        this.props.environment.document.activeElement !== blurTarget // Do nothing if we refocus the same element again (to solve issue in Safari on iOS)\n      ) {\n        this.reset({type: stateChangeTypes.blurButton})\n      }\n    })\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ BUTTON\n\n  /////////////////////////////// LABEL\n\n  getLabelProps = props => {\n    return {htmlFor: this.inputId, id: this.labelId, ...props}\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ LABEL\n\n  /////////////////////////////// INPUT\n\n  getInputProps = ({\n    onKeyDown,\n    onBlur,\n    onChange,\n    onInput,\n    onChangeText,\n    ...rest\n  } = {}) => {\n    let onChangeKey\n    let eventHandlers = {}\n\n    /* istanbul ignore next (preact) */\n    if (isPreact) {\n      onChangeKey = 'onInput'\n    } else {\n      onChangeKey = 'onChange'\n    }\n    const {inputValue, isOpen, highlightedIndex} = this.getState()\n\n    if (!rest.disabled) {\n      eventHandlers = {\n        [onChangeKey]: callAllEventHandlers(\n          onChange,\n          onInput,\n          this.inputHandleChange,\n        ),\n        onKeyDown: callAllEventHandlers(onKeyDown, this.inputHandleKeyDown),\n        onBlur: callAllEventHandlers(onBlur, this.inputHandleBlur),\n      }\n    }\n\n    /* istanbul ignore if (react-native) */\n    if (isReactNative) {\n      eventHandlers = {\n        onChange: callAllEventHandlers(\n          onChange,\n          onInput,\n          this.inputHandleChange,\n        ),\n        onChangeText: callAllEventHandlers(onChangeText, onInput, text =>\n          this.inputHandleChange({nativeEvent: {text}}),\n        ),\n        onBlur: callAllEventHandlers(onBlur, this.inputHandleBlur),\n      }\n    }\n\n    return {\n      'aria-autocomplete': 'list',\n      'aria-activedescendant':\n        isOpen && typeof highlightedIndex === 'number' && highlightedIndex >= 0\n          ? this.getItemId(highlightedIndex)\n          : null,\n      'aria-controls': isOpen ? this.menuId : null,\n      'aria-labelledby': this.labelId,\n      // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\n      // revert back since autocomplete=\"nope\" is ignored on latest Chrome and Opera\n      autoComplete: 'off',\n      value: inputValue,\n      id: this.inputId,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n\n  inputHandleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (key && this.inputKeyDownHandlers[key]) {\n      this.inputKeyDownHandlers[key].call(this, event)\n    }\n  }\n\n  inputHandleChange = event => {\n    this.internalSetState({\n      type: stateChangeTypes.changeInput,\n      isOpen: true,\n      inputValue: isReactNative\n        ? /* istanbul ignore next (react-native) */ event.nativeEvent.text\n        : event.target.value,\n      highlightedIndex: this.props.defaultHighlightedIndex,\n    })\n  }\n\n  inputHandleBlur = () => {\n    // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not the body element\n    this.internalSetTimeout(() => {\n      const downshiftButtonIsActive =\n        this.props.environment.document &&\n        !!this.props.environment.document.activeElement &&\n        !!this.props.environment.document.activeElement.dataset &&\n        this.props.environment.document.activeElement.dataset.toggle &&\n        this._rootNode &&\n        this._rootNode.contains(this.props.environment.document.activeElement)\n      if (!this.isMouseDown && !downshiftButtonIsActive) {\n        this.reset({type: stateChangeTypes.blurInput})\n      }\n    })\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ INPUT\n\n  /////////////////////////////// MENU\n\n  menuRef = node => {\n    this._menuNode = node\n  }\n\n  getMenuProps = (\n    {refKey = 'ref', ref, ...props} = {},\n    {suppressRefError = false} = {},\n  ) => {\n    this.getMenuProps.called = true\n    this.getMenuProps.refKey = refKey\n    this.getMenuProps.suppressRefError = suppressRefError\n\n    return {\n      [refKey]: handleRefs(ref, this.menuRef),\n      role: 'listbox',\n      'aria-labelledby': props && props['aria-label'] ? null : this.labelId,\n      id: this.menuId,\n      ...props,\n    }\n  }\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ MENU\n\n  /////////////////////////////// ITEM\n  getItemProps = ({\n    onMouseMove,\n    onMouseDown,\n    onClick,\n    onPress,\n    index,\n    item = process.env.NODE_ENV === 'production'\n      ? /* istanbul ignore next */ undefined\n      : requiredProp('getItemProps', 'item'),\n    ...rest\n  } = {}) => {\n    if (index === undefined) {\n      this.items.push(item)\n      index = this.items.indexOf(item)\n    } else {\n      this.items[index] = item\n    }\n\n    const onSelectKey = isReactNative\n      ? /* istanbul ignore next (react-native) */ 'onPress'\n      : 'onClick'\n    const customClickHandler = isReactNative\n      ? /* istanbul ignore next (react-native) */ onPress\n      : onClick\n\n    const enabledEventHandlers = {\n      // onMouseMove is used over onMouseEnter here. onMouseMove\n      // is only triggered on actual mouse movement while onMouseEnter\n      // can fire on DOM changes, interrupting keyboard navigation\n      onMouseMove: callAllEventHandlers(onMouseMove, () => {\n        if (index === this.getState().highlightedIndex) {\n          return\n        }\n        this.setHighlightedIndex(index, {\n          type: stateChangeTypes.itemMouseEnter,\n        })\n\n        // We never want to manually scroll when changing state based\n        // on `onMouseMove` because we will be moving the element out\n        // from under the user which is currently scrolling/moving the\n        // cursor\n        this.avoidScrolling = true\n        this.internalSetTimeout(() => (this.avoidScrolling = false), 250)\n      }),\n      onMouseDown: callAllEventHandlers(onMouseDown, event => {\n        // This prevents the activeElement from being changed\n        // to the item so it can remain with the current activeElement\n        // which is a more common use case.\n        event.preventDefault()\n      }),\n      [onSelectKey]: callAllEventHandlers(customClickHandler, () => {\n        this.selectItemAtIndex(index, {\n          type: stateChangeTypes.clickItem,\n        })\n      }),\n    }\n\n    // Passing down the onMouseDown handler to prevent redirect\n    // of the activeElement if clicking on disabled items\n    const eventHandlers = rest.disabled\n      ? {onMouseDown: enabledEventHandlers.onMouseDown}\n      : enabledEventHandlers\n\n    return {\n      id: this.getItemId(index),\n      role: 'option',\n      'aria-selected': this.getState().highlightedIndex === index,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ITEM\n\n  clearItems = () => {\n    this.items = []\n  }\n\n  reset = (otherStateToSet = {}, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      ({selectedItem}) => ({\n        isOpen: this.props.defaultIsOpen,\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        inputValue: this.props.itemToString(selectedItem),\n        ...otherStateToSet,\n      }),\n      cb,\n    )\n  }\n\n  toggleMenu = (otherStateToSet = {}, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      ({isOpen}) => {\n        return {\n          isOpen: !isOpen,\n          ...(isOpen && {\n            highlightedIndex: this.props.defaultHighlightedIndex,\n          }),\n          ...otherStateToSet,\n        }\n      },\n      () => {\n        const {isOpen, highlightedIndex} = this.getState()\n        if (isOpen) {\n          if (this.getItemCount() > 0 && typeof highlightedIndex === 'number') {\n            this.setHighlightedIndex(highlightedIndex, otherStateToSet)\n          }\n        }\n        cbToCb(cb)()\n      },\n    )\n  }\n\n  openMenu = cb => {\n    this.internalSetState({isOpen: true}, cb)\n  }\n\n  closeMenu = cb => {\n    this.internalSetState({isOpen: false}, cb)\n  }\n\n  updateStatus = debounce(() => {\n    const state = this.getState()\n    const item = this.items[state.highlightedIndex]\n    const resultCount = this.getItemCount()\n    const status = this.props.getA11yStatusMessage({\n      itemToString: this.props.itemToString,\n      previousResultCount: this.previousResultCount,\n      resultCount,\n      highlightedItem: item,\n      ...state,\n    })\n    this.previousResultCount = resultCount\n\n    setA11yStatus(status, this.props.environment.document)\n  }, 200)\n\n  componentDidMount() {\n    /* istanbul ignore if (react-native) */\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      !isReactNative &&\n      this.getMenuProps.called &&\n      !this.getMenuProps.suppressRefError\n    ) {\n      validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps)\n    }\n\n    /* istanbul ignore if (react-native) */\n    if (isReactNative) {\n      this.cleanup = () => {\n        this.internalClearTimeouts()\n      }\n    } else {\n      // this.isMouseDown helps us track whether the mouse is currently held down.\n      // This is useful when the user clicks on an item in the list, but holds the mouse\n      // down long enough for the list to disappear (because the blur event fires on the input)\n      // this.isMouseDown is used in the blur handler on the input to determine whether the blur event should\n      // trigger hiding the menu.\n      const onMouseDown = () => {\n        this.isMouseDown = true\n      }\n      const onMouseUp = event => {\n        this.isMouseDown = false\n        // if the target element or the activeElement is within a downshift node\n        // then we don't want to reset downshift\n        const contextWithinDownshift = targetWithinDownshift(\n          event.target,\n          [this._rootNode, this._menuNode],\n          this.props.environment.document,\n        )\n        if (!contextWithinDownshift && this.getState().isOpen) {\n          this.reset({type: stateChangeTypes.mouseUp}, () =>\n            this.props.onOuterClick(this.getStateAndHelpers()),\n          )\n        }\n      }\n      // Touching an element in iOS gives focus and hover states, but touching out of\n      // the element will remove hover, and persist the focus state, resulting in the\n      // blur event not being triggered.\n      // this.isTouchMove helps us track whether the user is tapping or swiping on a touch screen.\n      // If the user taps outside of Downshift, the component should be reset,\n      // but not if the user is swiping\n      const onTouchStart = () => {\n        this.isTouchMove = false\n      }\n\n      const onTouchMove = () => {\n        this.isTouchMove = true\n      }\n\n      const onTouchEnd = event => {\n        const contextWithinDownshift = targetWithinDownshift(\n          event.target,\n          [this._rootNode, this._menuNode],\n          this.props.environment.document,\n          false,\n        )\n        if (\n          !this.isTouchMove &&\n          !contextWithinDownshift &&\n          this.getState().isOpen\n        ) {\n          this.reset({type: stateChangeTypes.touchEnd}, () =>\n            this.props.onOuterClick(this.getStateAndHelpers()),\n          )\n        }\n      }\n      const {environment} = this.props\n\n      environment.addEventListener('mousedown', onMouseDown)\n      environment.addEventListener('mouseup', onMouseUp)\n      environment.addEventListener('touchstart', onTouchStart)\n      environment.addEventListener('touchmove', onTouchMove)\n      environment.addEventListener('touchend', onTouchEnd)\n\n      this.cleanup = () => {\n        this.internalClearTimeouts()\n        this.updateStatus.cancel()\n        environment.removeEventListener('mousedown', onMouseDown)\n        environment.removeEventListener('mouseup', onMouseUp)\n        environment.removeEventListener('touchstart', onTouchStart)\n        environment.removeEventListener('touchmove', onTouchMove)\n        environment.removeEventListener('touchend', onTouchEnd)\n      }\n    }\n  }\n\n  shouldScroll(prevState, prevProps) {\n    const {highlightedIndex: currentHighlightedIndex} =\n      this.props.highlightedIndex === undefined ? this.getState() : this.props\n    const {highlightedIndex: prevHighlightedIndex} =\n      prevProps.highlightedIndex === undefined ? prevState : prevProps\n    const scrollWhenOpen =\n      currentHighlightedIndex && this.getState().isOpen && !prevState.isOpen\n    const scrollWhenNavigating =\n      currentHighlightedIndex !== prevHighlightedIndex\n\n    return scrollWhenOpen || scrollWhenNavigating\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (process.env.NODE_ENV !== 'production') {\n      validateControlledUnchanged(prevProps, this.props)\n      /* istanbul ignore if (react-native) */\n      if (\n        !isReactNative &&\n        this.getMenuProps.called &&\n        !this.getMenuProps.suppressRefError\n      ) {\n        validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps)\n      }\n    }\n\n    if (\n      isControlledProp(this.props, 'selectedItem') &&\n      this.props.selectedItemChanged(\n        prevProps.selectedItem,\n        this.props.selectedItem,\n      )\n    ) {\n      this.internalSetState({\n        type: stateChangeTypes.controlledPropUpdatedSelectedItem,\n        inputValue: this.props.itemToString(this.props.selectedItem),\n      })\n    }\n\n    if (!this.avoidScrolling && this.shouldScroll(prevState, prevProps)) {\n      this.scrollHighlightedItemIntoView()\n    }\n\n    /* istanbul ignore else (react-native) */\n    if (!isReactNative) {\n      this.updateStatus()\n    }\n  }\n\n  componentWillUnmount() {\n    this.cleanup() // avoids memory leak\n  }\n\n  render() {\n    const children = unwrapArray(this.props.children, noop)\n    // because the items are rerendered every time we call the children\n    // we clear this out each render and it will be populated again as\n    // getItemProps is called.\n    this.clearItems()\n    // we reset this so we know whether the user calls getRootProps during\n    // this render. If they do then we don't need to do anything,\n    // if they don't then we need to clone the element they return and\n    // apply the props for them.\n    this.getRootProps.called = false\n    this.getRootProps.refKey = undefined\n    this.getRootProps.suppressRefError = undefined\n    // we do something similar for getMenuProps\n    this.getMenuProps.called = false\n    this.getMenuProps.refKey = undefined\n    this.getMenuProps.suppressRefError = undefined\n    // we do something similar for getLabelProps\n    this.getLabelProps.called = false\n    // and something similar for getInputProps\n    this.getInputProps.called = false\n    const element = unwrapArray(children(this.getStateAndHelpers()))\n    if (!element) {\n      return null\n    }\n\n    if (this.getRootProps.called || this.props.suppressRefError) {\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        !this.getRootProps.suppressRefError &&\n        !this.props.suppressRefError\n      ) {\n        validateGetRootPropsCalledCorrectly(element, this.getRootProps)\n      }\n      return element\n    } else if (isDOMElement(element)) {\n      // they didn't apply the root props, but we can clone\n      // this and apply the props ourselves\n      return cloneElement(element, this.getRootProps(getElementProps(element)))\n    }\n\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      // they didn't apply the root props, but they need to\n      // otherwise we can't query around the autocomplete\n\n      throw new Error(\n        'downshift: If you return a non-DOM element, you must apply the getRootProps function',\n      )\n    }\n\n    /* istanbul ignore next */\n    return undefined\n  }\n}\n\nexport default Downshift\n\nfunction validateGetMenuPropsCalledCorrectly(node, {refKey}) {\n  if (!node) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `downshift: The ref prop \"${refKey}\" from getMenuProps was not applied correctly on your menu element.`,\n    )\n  }\n}\n\nfunction validateGetRootPropsCalledCorrectly(element, {refKey}) {\n  const refKeySpecified = refKey !== 'ref'\n  const isComposite = !isDOMElement(element)\n  if (isComposite && !refKeySpecified && !isForwardRef(element)) {\n    // eslint-disable-next-line no-console\n    console.error(\n      'downshift: You returned a non-DOM element. You must specify a refKey in getRootProps',\n    )\n  } else if (!isComposite && refKeySpecified) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `downshift: You returned a DOM element. You should not specify a refKey in getRootProps. You specified \"${refKey}\"`,\n    )\n  }\n  if (!isForwardRef(element) && !getElementProps(element)[refKey]) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `downshift: You must apply the ref prop \"${refKey}\" from getRootProps onto your root element.`,\n    )\n  }\n}\n\nfunction validateControlledUnchanged(prevProps, nextProps) {\n  const warningDescription = `This prop should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Downshift element for the lifetime of the component. More info: https://github.com/downshift-js/downshift#control-props`\n  ;['selectedItem', 'isOpen', 'inputValue', 'highlightedIndex'].forEach(\n    propKey => {\n      if (\n        prevProps[propKey] !== undefined &&\n        nextProps[propKey] === undefined\n      ) {\n        // eslint-disable-next-line no-console\n        console.error(\n          `downshift: A component has changed the controlled prop \"${propKey}\" to be uncontrolled. ${warningDescription}`,\n        )\n      } else if (\n        prevProps[propKey] === undefined &&\n        nextProps[propKey] !== undefined\n      ) {\n        // eslint-disable-next-line no-console\n        console.error(\n          `downshift: A component has changed the uncontrolled prop \"${propKey}\" to be controlled. ${warningDescription}`,\n        )\n      }\n    },\n  )\n}\n","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","import PropTypes from 'prop-types'\nimport {useRef, useCallback, useReducer, useEffect} from 'react'\nimport {\n  scrollIntoView,\n  getNextWrappingIndex,\n  getState,\n  generateId,\n  debounce,\n  targetWithinDownshift,\n} from '../utils'\nimport setStatus from '../set-a11y-status'\n\nconst dropdownDefaultStateValues = {\n  highlightedIndex: -1,\n  isOpen: false,\n  selectedItem: null,\n  inputValue: '',\n}\n\nfunction callOnChangeProps(action, state, newState) {\n  const {props, type} = action\n  const changes = {}\n\n  Object.keys(state).forEach(key => {\n    invokeOnChangeHandler(key, props, state, newState)\n\n    if (newState[key] !== state[key]) {\n      changes[key] = newState[key]\n    }\n  })\n\n  if (props.onStateChange && Object.keys(changes).length) {\n    props.onStateChange({type, ...changes})\n  }\n}\n\nfunction invokeOnChangeHandler(key, props, state, newState) {\n  const handler = `on${capitalizeString(key)}Change`\n  if (\n    props[handler] &&\n    newState[key] !== undefined &&\n    newState[key] !== state[key]\n  ) {\n    props[handler](newState)\n  }\n}\n\n/**\n * Default state reducer that returns the changes.\n *\n * @param {Object} s state.\n * @param {Object} a action with changes.\n * @returns {Object} changes.\n */\nfunction stateReducer(s, a) {\n  return a.changes\n}\n\n/**\n * Returns a message to be added to aria-live region when item is selected.\n *\n * @param {Object} selectionParameters Parameters required to build the message.\n * @returns {string} The a11y message.\n */\nfunction getA11ySelectionMessage(selectionParameters) {\n  const {selectedItem, itemToString: itemToStringLocal} = selectionParameters\n\n  return selectedItem\n    ? `${itemToStringLocal(selectedItem)} has been selected.`\n    : ''\n}\n\n/**\n * Debounced call for updating the a11y message.\n */\nexport const updateA11yStatus = debounce((getA11yMessage, document) => {\n  setStatus(getA11yMessage(), document)\n}, 200)\n\nexport function getElementIds({\n  id,\n  labelId,\n  menuId,\n  getItemId,\n  toggleButtonId,\n}) {\n  const uniqueId = id === undefined ? `downshift-${generateId()}` : id\n\n  return {\n    labelId: labelId || `${uniqueId}-label`,\n    menuId: menuId || `${uniqueId}-menu`,\n    getItemId: getItemId || (index => `${uniqueId}-item-${index}`),\n    toggleButtonId: toggleButtonId || `${uniqueId}-toggle-button`,\n  }\n}\n\nexport function getItemIndex(index, item, items) {\n  if (index !== undefined) {\n    return index\n  }\n  if (items.length === 0) {\n    return -1\n  }\n  return items.indexOf(item)\n}\n\nfunction itemToString(item) {\n  return item ? String(item) : ''\n}\n\nexport function getPropTypesValidator(caller, propTypes) {\n  // istanbul ignore next\n  return function validate(options = {}) {\n    Object.keys(propTypes).forEach(key => {\n      PropTypes.checkPropTypes(propTypes, options, key, caller.name)\n    })\n  }\n}\n\nexport function isAcceptedCharacterKey(key) {\n  return /^\\S{1}$/.test(key)\n}\n\nexport function capitalizeString(string) {\n  return `${string.slice(0, 1).toUpperCase()}${string.slice(1)}`\n}\n\n/**\n * Computes the controlled state using a the previous state, props,\n * two reducers, one from downshift and an optional one from the user.\n * Also calls the onChange handlers for state values that have changed.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @returns {Array} An array with the state and an action dispatcher.\n */\nexport function useEnhancedReducer(reducer, initialState, props) {\n  const prevStateRef = useRef()\n  const actionRef = useRef()\n  const enhancedReducer = useCallback(\n    (state, action) => {\n      actionRef.current = action\n      state = getState(state, action.props)\n\n      const changes = reducer(state, action)\n      const newState = action.props.stateReducer(state, {...action, changes})\n\n      return newState\n    },\n    [reducer],\n  )\n  const [state, dispatch] = useReducer(enhancedReducer, initialState)\n  const dispatchWithProps = action => dispatch({props, ...action})\n  const action = actionRef.current\n\n  useEffect(() => {\n    if (action && prevStateRef.current && prevStateRef.current !== state) {\n      callOnChangeProps(action, prevStateRef.current, state)\n    }\n\n    prevStateRef.current = state\n  }, [state, props, action])\n\n  return [state, dispatchWithProps]\n}\n\n/**\n * Wraps the useEnhancedReducer and applies the controlled prop values before\n * returning the new state.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @returns {Array} An array with the state and an action dispatcher.\n */\nexport function useControlledReducer(reducer, initialState, props) {\n  const [state, dispatch] = useEnhancedReducer(reducer, initialState, props)\n\n  return [getState(state, props), dispatch]\n}\n\nexport const defaultProps = {\n  itemToString,\n  stateReducer,\n  getA11ySelectionMessage,\n  scrollIntoView,\n  circularNavigation: false,\n  environment:\n    typeof window === 'undefined' /* istanbul ignore next (ssr) */\n      ? {}\n      : window,\n}\n\nexport function getDefaultValue(\n  props,\n  propKey,\n  defaultStateValues = dropdownDefaultStateValues,\n) {\n  const defaultPropKey = `default${capitalizeString(propKey)}`\n\n  if (defaultPropKey in props) {\n    return props[defaultPropKey]\n  }\n\n  return defaultStateValues[propKey]\n}\n\nexport function getInitialValue(\n  props,\n  propKey,\n  defaultStateValues = dropdownDefaultStateValues,\n) {\n  if (propKey in props) {\n    return props[propKey]\n  }\n\n  const initialPropKey = `initial${capitalizeString(propKey)}`\n\n  if (initialPropKey in props) {\n    return props[initialPropKey]\n  }\n  return getDefaultValue(props, propKey, defaultStateValues)\n}\n\nexport function getInitialState(props) {\n  const selectedItem = getInitialValue(props, 'selectedItem')\n  const isOpen = getInitialValue(props, 'isOpen')\n  const highlightedIndex = getInitialValue(props, 'highlightedIndex')\n  const inputValue = getInitialValue(props, 'inputValue')\n\n  return {\n    highlightedIndex:\n      highlightedIndex < 0 && selectedItem\n        ? props.items.indexOf(selectedItem)\n        : highlightedIndex,\n    isOpen,\n    selectedItem,\n    inputValue,\n  }\n}\n\nexport function getHighlightedIndexOnOpen(\n  props,\n  state,\n  offset,\n  getItemNodeFromIndex,\n) {\n  const {items, initialHighlightedIndex, defaultHighlightedIndex} = props\n  const {selectedItem, highlightedIndex} = state\n\n  // initialHighlightedIndex will give value to highlightedIndex on initial state only.\n  if (\n    initialHighlightedIndex !== undefined &&\n    highlightedIndex === initialHighlightedIndex\n  ) {\n    return initialHighlightedIndex\n  }\n  if (defaultHighlightedIndex !== undefined) {\n    return defaultHighlightedIndex\n  }\n  if (selectedItem) {\n    if (offset === 0) {\n      return items.indexOf(selectedItem)\n    }\n    return getNextWrappingIndex(\n      offset,\n      items.indexOf(selectedItem),\n      items.length,\n      getItemNodeFromIndex,\n      false,\n    )\n  }\n  if (offset === 0) {\n    return -1\n  }\n  return offset < 0 ? items.length - 1 : 0\n}\n\n/**\n * Reuse the movement tracking of mouse and touch events.\n *\n * @param {boolean} isOpen Whether the dropdown is open or not.\n * @param {Array<Object>} downshiftElementRefs Downshift element refs to track movement (toggleButton, menu etc.)\n * @param {Object} environment Environment where component/hook exists.\n * @param {Function} handleBlur Handler on blur from mouse or touch.\n * @returns {Object} Ref containing whether mouseDown or touchMove event is happening\n */\nexport function useMouseAndTouchTracker(\n  isOpen,\n  downshiftElementRefs,\n  environment,\n  handleBlur,\n) {\n  const mouseAndTouchTrackersRef = useRef({\n    isMouseDown: false,\n    isTouchMove: false,\n  })\n\n  useEffect(() => {\n    // The same strategy for checking if a click occurred inside or outside downsift\n    // as in downshift.js.\n    const onMouseDown = () => {\n      mouseAndTouchTrackersRef.current.isMouseDown = true\n    }\n    const onMouseUp = event => {\n      mouseAndTouchTrackersRef.current.isMouseDown = false\n      if (\n        isOpen &&\n        !targetWithinDownshift(\n          event.target,\n          downshiftElementRefs.map(ref => ref.current),\n          environment.document,\n        )\n      ) {\n        handleBlur()\n      }\n    }\n    const onTouchStart = () => {\n      mouseAndTouchTrackersRef.current.isTouchMove = false\n    }\n    const onTouchMove = () => {\n      mouseAndTouchTrackersRef.current.isTouchMove = true\n    }\n    const onTouchEnd = event => {\n      if (\n        isOpen &&\n        !mouseAndTouchTrackersRef.current.isTouchMove &&\n        !targetWithinDownshift(\n          event.target,\n          downshiftElementRefs.map(ref => ref.current),\n          environment.document,\n          false,\n        )\n      ) {\n        handleBlur()\n      }\n    }\n\n    environment.addEventListener('mousedown', onMouseDown)\n    environment.addEventListener('mouseup', onMouseUp)\n    environment.addEventListener('touchstart', onTouchStart)\n    environment.addEventListener('touchmove', onTouchMove)\n    environment.addEventListener('touchend', onTouchEnd)\n\n    return function cleanup() {\n      environment.removeEventListener('mousedown', onMouseDown)\n      environment.removeEventListener('mouseup', onMouseUp)\n      environment.removeEventListener('touchstart', onTouchStart)\n      environment.removeEventListener('touchmove', onTouchMove)\n      environment.removeEventListener('touchend', onTouchEnd)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen, environment])\n\n  return mouseAndTouchTrackersRef\n}\n","import PropTypes from 'prop-types'\nimport {defaultProps as commonDefaultProps} from '../utils'\n\nfunction getItemIndexByCharacterKey(\n  keysSoFar,\n  highlightedIndex,\n  items,\n  itemToStringParam,\n  getItemNodeFromIndex,\n) {\n  const lowerCasedItemStrings = items.map(item =>\n    itemToStringParam(item).toLowerCase(),\n  )\n  const lowerCasedKeysSoFar = keysSoFar.toLowerCase()\n  const isValid = (itemString, index) => {\n    const element = getItemNodeFromIndex(index)\n\n    return (\n      itemString.startsWith(lowerCasedKeysSoFar) &&\n      !(element && element.hasAttribute('disabled'))\n    )\n  }\n\n  for (\n    let index = highlightedIndex + 1;\n    index < lowerCasedItemStrings.length;\n    index++\n  ) {\n    const itemString = lowerCasedItemStrings[index]\n\n    if (isValid(itemString, index)) {\n      return index\n    }\n  }\n\n  for (let index = 0; index < highlightedIndex; index++) {\n    const itemString = lowerCasedItemStrings[index]\n\n    if (isValid(itemString, index)) {\n      return index\n    }\n  }\n\n  return highlightedIndex\n}\n\nconst propTypes = {\n  items: PropTypes.array.isRequired,\n  itemToString: PropTypes.func,\n  getA11yStatusMessage: PropTypes.func,\n  getA11ySelectionMessage: PropTypes.func,\n  circularNavigation: PropTypes.bool,\n  highlightedIndex: PropTypes.number,\n  defaultHighlightedIndex: PropTypes.number,\n  initialHighlightedIndex: PropTypes.number,\n  isOpen: PropTypes.bool,\n  defaultIsOpen: PropTypes.bool,\n  initialIsOpen: PropTypes.bool,\n  selectedItem: PropTypes.any,\n  initialSelectedItem: PropTypes.any,\n  defaultSelectedItem: PropTypes.any,\n  id: PropTypes.string,\n  labelId: PropTypes.string,\n  menuId: PropTypes.string,\n  getItemId: PropTypes.func,\n  toggleButtonId: PropTypes.string,\n  stateReducer: PropTypes.func,\n  onSelectedItemChange: PropTypes.func,\n  onHighlightedIndexChange: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onIsOpenChange: PropTypes.func,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any,\n    }),\n  }),\n}\n\n/**\n * Default implementation for status message. Only added when menu is open.\n * Will specift if there are results in the list, and if so, how many,\n * and what keys are relevant.\n *\n * @param {Object} param the downshift state and other relevant properties\n * @return {String} the a11y status message\n */\nfunction getA11yStatusMessage({isOpen, resultCount, previousResultCount}) {\n  if (!isOpen) {\n    return ''\n  }\n\n  if (!resultCount) {\n    return 'No results are available.'\n  }\n\n  if (resultCount !== previousResultCount) {\n    return `${resultCount} result${\n      resultCount === 1 ? ' is' : 's are'\n    } available, use up and down arrow keys to navigate. Press Enter or Space Bar keys to select.`\n  }\n  \n  return ''\n}\n\nconst defaultProps = {\n  ...commonDefaultProps,\n  getA11yStatusMessage,\n}\n\nexport {propTypes, getItemIndexByCharacterKey, defaultProps}\n","import {getNextWrappingIndex, getNextNonDisabledIndex} from '../../utils'\nimport {getHighlightedIndexOnOpen, getDefaultValue} from '../utils'\nimport {getItemIndexByCharacterKey} from './utils'\nimport * as stateChangeTypes from './stateChangeTypes'\n\n/* eslint-disable complexity */\nexport default function downshiftSelectReducer(state, action) {\n  const {type, props, shiftKey} = action\n  let changes\n\n  switch (type) {\n    case stateChangeTypes.ItemMouseMove:\n      changes = {\n        highlightedIndex: action.index,\n      }\n\n      break\n    case stateChangeTypes.ItemClick:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        selectedItem: props.items[action.index],\n      }\n\n      break\n    case stateChangeTypes.ToggleButtonKeyDownCharacter:\n      {\n        const lowercasedKey = action.key\n        const inputValue = `${state.inputValue}${lowercasedKey}`\n        const itemIndex = getItemIndexByCharacterKey(\n          inputValue,\n          state.selectedItem ? props.items.indexOf(state.selectedItem) : -1,\n          props.items,\n          props.itemToString,\n          action.getItemNodeFromIndex,\n        )\n\n        changes = {\n          inputValue,\n          ...(itemIndex >= 0 && {\n            selectedItem: props.items[itemIndex],\n          }),\n        }\n      }\n\n      break\n    case stateChangeTypes.ToggleButtonKeyDownArrowDown:\n      changes = {\n        highlightedIndex: getHighlightedIndexOnOpen(\n          props,\n          state,\n          1,\n          action.getItemNodeFromIndex,\n        ),\n        isOpen: true,\n      }\n\n      break\n    case stateChangeTypes.ToggleButtonKeyDownArrowUp:\n      changes = {\n        highlightedIndex: getHighlightedIndexOnOpen(\n          props,\n          state,\n          -1,\n          action.getItemNodeFromIndex,\n        ),\n        isOpen: true,\n      }\n\n      break\n    case stateChangeTypes.MenuKeyDownEnter:\n    case stateChangeTypes.MenuKeyDownSpaceButton:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        ...(state.highlightedIndex >= 0 && {\n          selectedItem: props.items[state.highlightedIndex],\n        }),\n      }\n\n      break\n    case stateChangeTypes.MenuKeyDownHome:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(\n          1,\n          0,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          false,\n        ),\n      }\n\n      break\n    case stateChangeTypes.MenuKeyDownEnd:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(\n          -1,\n          props.items.length - 1,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          false,\n        ),\n      }\n\n      break\n    case stateChangeTypes.MenuKeyDownEscape:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1,\n      }\n\n      break\n    case stateChangeTypes.MenuBlur:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1,\n      }\n\n      break\n    case stateChangeTypes.MenuKeyDownCharacter:\n      {\n        const lowercasedKey = action.key\n        const inputValue = `${state.inputValue}${lowercasedKey}`\n        const highlightedIndex = getItemIndexByCharacterKey(\n          inputValue,\n          state.highlightedIndex,\n          props.items,\n          props.itemToString,\n          action.getItemNodeFromIndex,\n        )\n\n        changes = {\n          inputValue,\n          ...(highlightedIndex >= 0 && {\n            highlightedIndex,\n          }),\n        }\n      }\n      break\n    case stateChangeTypes.MenuKeyDownArrowDown:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(\n          shiftKey ? 5 : 1,\n          state.highlightedIndex,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          props.circularNavigation,\n        ),\n      }\n\n      break\n    case stateChangeTypes.MenuKeyDownArrowUp:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(\n          shiftKey ? -5 : -1,\n          state.highlightedIndex,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          props.circularNavigation,\n        ),\n      }\n\n      break\n    case stateChangeTypes.MenuMouseLeave:\n      changes = {\n        highlightedIndex: -1,\n      }\n\n      break\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen,\n        highlightedIndex: state.isOpen\n          ? -1\n          : getHighlightedIndexOnOpen(props, state, 0),\n      }\n\n      break\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getHighlightedIndexOnOpen(props, state, 0),\n      }\n\n      break\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false,\n      }\n\n      break\n    case stateChangeTypes.FunctionSetHighlightedIndex:\n      changes = {\n        highlightedIndex: action.highlightedIndex,\n      }\n\n      break\n    case stateChangeTypes.FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n      }\n\n      break\n    case stateChangeTypes.FunctionSetInputValue:\n      changes = {\n        inputValue: action.inputValue,\n      }\n\n      break\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: getDefaultValue(props, 'selectedItem'),\n        inputValue: getDefaultValue(props, 'inputValue'),\n      }\n\n      break\n    default:\n      throw new Error('Reducer called without proper action type.')\n  }\n\n  return {\n    ...state,\n    ...changes,\n  }\n}\n/* eslint-enable complexity */\n","/* eslint-disable max-statements */\nimport {useRef, useEffect} from 'react'\nimport {\n  getElementIds,\n  getItemIndex,\n  getPropTypesValidator,\n  isAcceptedCharacterKey,\n  useControlledReducer,\n  getInitialState,\n  updateA11yStatus,\n  useMouseAndTouchTracker,\n} from '../utils'\nimport {\n  callAllEventHandlers,\n  handleRefs,\n  debounce,\n  normalizeArrowKey,\n} from '../../utils'\nimport downshiftSelectReducer from './reducer'\nimport {propTypes, defaultProps} from './utils'\nimport * as stateChangeTypes from './stateChangeTypes'\n\nconst validatePropTypes =\n  process.env.NODE_ENV === 'production'\n    ? /* istanbul ignore next */ null\n    : getPropTypesValidator(useSelect, propTypes)\n\nuseSelect.stateChangeTypes = stateChangeTypes\n\nfunction useSelect(userProps = {}) {\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    validatePropTypes(userProps)\n  }\n  // Props defaults and destructuring.\n  const props = {\n    ...defaultProps,\n    ...userProps,\n  }\n  const {\n    items,\n    scrollIntoView,\n    environment,\n    initialIsOpen,\n    defaultIsOpen,\n    itemToString,\n    getA11ySelectionMessage,\n    getA11yStatusMessage,\n  } = props\n  // Initial state depending on controlled props.\n  const initialState = getInitialState(props)\n\n  // Reducer init.\n  const [\n    {isOpen, highlightedIndex, selectedItem, inputValue},\n    dispatch,\n  ] = useControlledReducer(downshiftSelectReducer, initialState, props)\n\n  // Refs\n  const toggleButtonRef = useRef(null)\n  const menuRef = useRef(null)\n  const isInitialMountRef = useRef(true)\n  const shouldScrollRef = useRef(true)\n  const shouldBlurRef = useRef(true)\n  const clearTimeoutRef = useRef(null)\n  const elementIdsRef = useRef(getElementIds(props))\n  const previousResultCountRef = useRef()\n\n  // Some utils.\n  const getItemNodeFromIndex = index =>\n    environment.document.getElementById(elementIdsRef.current.getItemId(index))\n\n  // Effects.\n  /* Sets a11y status message on changes in state. */\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return\n    }\n\n    const previousResultCount = previousResultCountRef.current\n\n    updateA11yStatus(\n      () =>\n        getA11yStatusMessage({\n          isOpen,\n          highlightedIndex,\n          selectedItem,\n          inputValue,\n          highlightedItem: items[highlightedIndex],\n          resultCount: items.length,\n          itemToString,\n          previousResultCount,\n        }),\n      environment.document,\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen, highlightedIndex, selectedItem, inputValue])\n  /* Sets a11y status message on changes in selectedItem. */\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return\n    }\n\n    const previousResultCount = previousResultCountRef.current\n\n    updateA11yStatus(\n      () =>\n        getA11ySelectionMessage({\n          isOpen,\n          highlightedIndex,\n          selectedItem,\n          inputValue,\n          highlightedItem: items[highlightedIndex],\n          resultCount: items.length,\n          itemToString,\n          previousResultCount,\n        }),\n      environment.document,\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedItem])\n  /* Sets cleanup for the keysSoFar after 500ms. */\n  useEffect(() => {\n    // init the clean function here as we need access to dispatch.\n    if (isInitialMountRef.current) {\n      clearTimeoutRef.current = debounce(outerDispatch => {\n        outerDispatch({\n          type: stateChangeTypes.FunctionSetInputValue,\n          inputValue: '',\n        })\n      }, 500)\n    }\n\n    if (!inputValue) {\n      return\n    }\n    clearTimeoutRef.current(dispatch)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [inputValue])\n  /* Controls the focus on the menu or the toggle button. */\n  useEffect(() => {\n    // Don't focus menu on first render.\n    if (isInitialMountRef.current) {\n      // Unless it was initialised as open.\n      if ((initialIsOpen || defaultIsOpen || isOpen) && menuRef.current) {\n        menuRef.current.focus()\n      }\n      return\n    }\n    // Focus menu on open.\n    if (isOpen) {\n      // istanbul ignore else\n      if (menuRef.current) {\n        menuRef.current.focus()\n        return\n      }\n    }\n    // Focus toggleButton on close, but on if was closed with (Shift+)Tab.\n    if (environment.document.activeElement === menuRef.current) {\n      // istanbul ignore else\n      if (toggleButtonRef.current) {\n        shouldBlurRef.current = false\n        toggleButtonRef.current.focus()\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen])\n  /* Scroll on highlighted item if change comes from keyboard. */\n  useEffect(() => {\n    if (highlightedIndex < 0 || !isOpen || !items.length) {\n      return\n    }\n    if (shouldScrollRef.current === false) {\n      shouldScrollRef.current = true\n    } else {\n      scrollIntoView(getItemNodeFromIndex(highlightedIndex), menuRef.current)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [highlightedIndex])\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return\n    }\n\n    previousResultCountRef.current = items.length\n  })\n  /* Make initial ref false. */\n  useEffect(() => {\n    isInitialMountRef.current = false\n  }, [])\n  /* Add mouse/touch events to document. */\n  const mouseAndTouchTrackersRef = useMouseAndTouchTracker(\n    isOpen,\n    [menuRef, toggleButtonRef],\n    environment,\n    () => {\n      dispatch({\n        type: stateChangeTypes.MenuBlur,\n      })\n    },\n  )\n\n  // Event handler functions.\n  const toggleButtonKeyDownHandlers = {\n    ArrowDown(event) {\n      event.preventDefault()\n\n      dispatch({\n        type: stateChangeTypes.ToggleButtonKeyDownArrowDown,\n        getItemNodeFromIndex,\n        shiftKey: event.shiftKey,\n      })\n    },\n    ArrowUp(event) {\n      event.preventDefault()\n\n      dispatch({\n        type: stateChangeTypes.ToggleButtonKeyDownArrowUp,\n        getItemNodeFromIndex,\n        shiftKey: event.shiftKey,\n      })\n    },\n  }\n  const menuKeyDownHandlers = {\n    ArrowDown(event) {\n      event.preventDefault()\n\n      dispatch({\n        type: stateChangeTypes.MenuKeyDownArrowDown,\n        getItemNodeFromIndex,\n        shiftKey: event.shiftKey,\n      })\n    },\n    ArrowUp(event) {\n      event.preventDefault()\n\n      dispatch({\n        type: stateChangeTypes.MenuKeyDownArrowUp,\n        getItemNodeFromIndex,\n        shiftKey: event.shiftKey,\n      })\n    },\n    Home(event) {\n      event.preventDefault()\n\n      dispatch({\n        type: stateChangeTypes.MenuKeyDownHome,\n        getItemNodeFromIndex,\n      })\n    },\n    End(event) {\n      event.preventDefault()\n\n      dispatch({\n        type: stateChangeTypes.MenuKeyDownEnd,\n        getItemNodeFromIndex,\n      })\n    },\n    Escape() {\n      dispatch({\n        type: stateChangeTypes.MenuKeyDownEscape,\n      })\n    },\n    Enter(event) {\n      event.preventDefault()\n\n      dispatch({\n        type: stateChangeTypes.MenuKeyDownEnter,\n      })\n    },\n    ' '(event) {\n      event.preventDefault()\n\n      dispatch({\n        type: stateChangeTypes.MenuKeyDownSpaceButton,\n      })\n    },\n  }\n\n  // Event handlers.\n  const menuHandleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (key && menuKeyDownHandlers[key]) {\n      menuKeyDownHandlers[key](event)\n    } else if (isAcceptedCharacterKey(key)) {\n      dispatch({\n        type: stateChangeTypes.MenuKeyDownCharacter,\n        key,\n        getItemNodeFromIndex,\n      })\n    }\n  }\n  const menuHandleBlur = () => {\n    // if the blur was a result of selection, we don't trigger this action.\n    if (shouldBlurRef.current === false) {\n      shouldBlurRef.current = true\n      return\n    }\n\n    const shouldBlur = !mouseAndTouchTrackersRef.current.isMouseDown\n    /* istanbul ignore else */\n    if (shouldBlur) {\n      dispatch({type: stateChangeTypes.MenuBlur})\n    }\n  }\n  const menuHandleMouseLeave = () => {\n    dispatch({\n      type: stateChangeTypes.MenuMouseLeave,\n    })\n  }\n  const toggleButtonHandleClick = () => {\n    dispatch({\n      type: stateChangeTypes.ToggleButtonClick,\n    })\n  }\n  const toggleButtonHandleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (key && toggleButtonKeyDownHandlers[key]) {\n      toggleButtonKeyDownHandlers[key](event)\n    } else if (isAcceptedCharacterKey(key)) {\n      dispatch({\n        type: stateChangeTypes.ToggleButtonKeyDownCharacter,\n        key,\n        getItemNodeFromIndex,\n      })\n    }\n  }\n  const itemHandleMouseMove = index => {\n    if (index === highlightedIndex) {\n      return\n    }\n    shouldScrollRef.current = false\n    dispatch({\n      type: stateChangeTypes.ItemMouseMove,\n      index,\n    })\n  }\n  const itemHandleClick = index => {\n    dispatch({\n      type: stateChangeTypes.ItemClick,\n      index,\n    })\n  }\n\n  // Action functions.\n  const toggleMenu = () => {\n    dispatch({\n      type: stateChangeTypes.FunctionToggleMenu,\n    })\n  }\n  const closeMenu = () => {\n    dispatch({\n      type: stateChangeTypes.FunctionCloseMenu,\n    })\n  }\n  const openMenu = () => {\n    dispatch({\n      type: stateChangeTypes.FunctionOpenMenu,\n    })\n  }\n  const setHighlightedIndex = newHighlightedIndex => {\n    dispatch({\n      type: stateChangeTypes.FunctionSetHighlightedIndex,\n      highlightedIndex: newHighlightedIndex,\n    })\n  }\n  const selectItem = newSelectedItem => {\n    dispatch({\n      type: stateChangeTypes.FunctionSelectItem,\n      selectedItem: newSelectedItem,\n    })\n  }\n  const reset = () => {\n    dispatch({\n      type: stateChangeTypes.FunctionReset,\n    })\n  }\n  const setInputValue = newInputValue => {\n    dispatch({\n      type: stateChangeTypes.FunctionSetInputValue,\n      inputValue: newInputValue,\n    })\n  }\n  // Getter functions.\n  const getLabelProps = labelProps => ({\n    id: elementIdsRef.current.labelId,\n    htmlFor: elementIdsRef.current.toggleButtonId,\n    ...labelProps,\n  })\n  const getMenuProps = ({\n    onMouseLeave,\n    refKey = 'ref',\n    onKeyDown,\n    onBlur,\n    ref,\n    ...rest\n  } = {}) => ({\n    [refKey]: handleRefs(ref, menuNode => {\n      menuRef.current = menuNode\n    }),\n    id: elementIdsRef.current.menuId,\n    role: 'listbox',\n    'aria-labelledby': elementIdsRef.current.labelId,\n    tabIndex: -1,\n    ...(isOpen &&\n      highlightedIndex > -1 && {\n        'aria-activedescendant': elementIdsRef.current.getItemId(\n          highlightedIndex,\n        ),\n      }),\n    onMouseLeave: callAllEventHandlers(onMouseLeave, menuHandleMouseLeave),\n    onKeyDown: callAllEventHandlers(onKeyDown, menuHandleKeyDown),\n    onBlur: callAllEventHandlers(onBlur, menuHandleBlur),\n    ...rest,\n  })\n  const getToggleButtonProps = ({\n    onClick,\n    onKeyDown,\n    refKey = 'ref',\n    ref,\n    ...rest\n  } = {}) => {\n    const toggleProps = {\n      [refKey]: handleRefs(ref, toggleButtonNode => {\n        toggleButtonRef.current = toggleButtonNode\n      }),\n      id: elementIdsRef.current.toggleButtonId,\n      'aria-haspopup': 'listbox',\n      'aria-expanded': isOpen,\n      'aria-labelledby': `${elementIdsRef.current.labelId} ${elementIdsRef.current.toggleButtonId}`,\n      ...rest,\n    }\n\n    if (!rest.disabled) {\n      toggleProps.onClick = callAllEventHandlers(\n        onClick,\n        toggleButtonHandleClick,\n      )\n      toggleProps.onKeyDown = callAllEventHandlers(\n        onKeyDown,\n        toggleButtonHandleKeyDown,\n      )\n    }\n\n    return toggleProps\n  }\n  const getItemProps = ({item, index, onMouseMove, onClick, ...rest} = {}) => {\n    const itemIndex = getItemIndex(index, item, items)\n    if (itemIndex < 0) {\n      throw new Error('Pass either item or item index in getItemProps!')\n    }\n    const itemProps = {\n      role: 'option',\n      'aria-selected': `${itemIndex === highlightedIndex}`,\n      id: elementIdsRef.current.getItemId(itemIndex),\n      ...rest,\n    }\n\n    if (!rest.disabled) {\n      itemProps.onMouseMove = callAllEventHandlers(onMouseMove, () =>\n        itemHandleMouseMove(itemIndex),\n      )\n      itemProps.onClick = callAllEventHandlers(onClick, () =>\n        itemHandleClick(itemIndex),\n      )\n    }\n\n    return itemProps\n  }\n\n  return {\n    // prop getters.\n    getToggleButtonProps,\n    getLabelProps,\n    getMenuProps,\n    getItemProps,\n    // actions.\n    toggleMenu,\n    openMenu,\n    closeMenu,\n    setHighlightedIndex,\n    selectItem,\n    reset,\n    setInputValue,\n    // state.\n    highlightedIndex,\n    isOpen,\n    selectedItem,\n    inputValue,\n  }\n}\n\nexport default useSelect\n","import productionEnum from '../../productionEnum.macro'\n\nexport const InputKeyDownArrowDown = productionEnum(\n  '__input_keydown_arrow_down__',\n)\nexport const InputKeyDownArrowUp = productionEnum('__input_keydown_arrow_up__')\nexport const InputKeyDownEscape = productionEnum('__input_keydown_escape__')\nexport const InputKeyDownHome = productionEnum('__input_keydown_home__')\nexport const InputKeyDownEnd = productionEnum('__input_keydown_end__')\nexport const InputKeyDownEnter = productionEnum('__input_keydown_enter__')\nexport const InputChange = productionEnum('__input_change__')\nexport const InputBlur = productionEnum('__input_blur__')\n\nexport const MenuMouseLeave = productionEnum('__menu_mouse_leave__')\n\nexport const ItemMouseMove = productionEnum('__item_mouse_move__')\nexport const ItemClick = productionEnum('__item_click__')\n\nexport const ToggleButtonClick = productionEnum('__togglebutton_click__')\n\nexport const FunctionToggleMenu = productionEnum('__function_toggle_menu__')\nexport const FunctionOpenMenu = productionEnum('__function_open_menu__')\nexport const FunctionCloseMenu = productionEnum('__function_close_menu__')\nexport const FunctionSetHighlightedIndex = productionEnum(\n  '__function_set_highlighted_index__',\n)\nexport const FunctionSelectItem = productionEnum('__function_select_item__')\nexport const FunctionSetInputValue = productionEnum(\n  '__function_set_input_value__',\n)\nexport const FunctionReset = productionEnum('__function_reset__')\nexport const ControlledPropUpdatedSelectedItem = productionEnum(\n  '__controlled_prop_updated_selected_item__',\n)\n","import {useRef} from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  generateId,\n  getA11yStatusMessage,\n  isControlledProp,\n  getState,\n} from '../../utils'\nimport {\n  getElementIds as getElementIdsCommon,\n  defaultProps as defaultPropsCommon,\n  getInitialState as getInitialStateCommon,\n  useEnhancedReducer,\n} from '../utils'\nimport {ControlledPropUpdatedSelectedItem} from './stateChangeTypes'\n\nexport function getElementIds({id, inputId, ...rest}) {\n  const uniqueId = id === undefined ? `downshift-${generateId()}` : id\n\n  return {\n    inputId: inputId || `${uniqueId}-input`,\n    ...getElementIdsCommon({id, ...rest}),\n  }\n}\n\nexport function getInitialState(props) {\n  const initialState = getInitialStateCommon(props)\n  const {selectedItem} = initialState\n  let {inputValue} = initialState\n\n  if (\n    inputValue === '' &&\n    selectedItem &&\n    props.defaultInputValue === undefined &&\n    props.initialInputValue === undefined &&\n    props.inputValue === undefined\n  ) {\n    inputValue = props.itemToString(selectedItem)\n  }\n\n  return {\n    ...initialState,\n    inputValue,\n  }\n}\n\nexport const propTypes = {\n  items: PropTypes.array.isRequired,\n  itemToString: PropTypes.func,\n  getA11yStatusMessage: PropTypes.func,\n  getA11ySelectionMessage: PropTypes.func,\n  circularNavigation: PropTypes.bool,\n  highlightedIndex: PropTypes.number,\n  defaultHighlightedIndex: PropTypes.number,\n  initialHighlightedIndex: PropTypes.number,\n  isOpen: PropTypes.bool,\n  defaultIsOpen: PropTypes.bool,\n  initialIsOpen: PropTypes.bool,\n  selectedItem: PropTypes.any,\n  initialSelectedItem: PropTypes.any,\n  defaultSelectedItem: PropTypes.any,\n  inputValue: PropTypes.string,\n  defaultInputValue: PropTypes.string,\n  initialInputValue: PropTypes.string,\n  id: PropTypes.string,\n  labelId: PropTypes.string,\n  menuId: PropTypes.string,\n  getItemId: PropTypes.func,\n  inputId: PropTypes.string,\n  toggleButtonId: PropTypes.string,\n  stateReducer: PropTypes.func,\n  onSelectedItemChange: PropTypes.func,\n  onHighlightedIndexChange: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onIsOpenChange: PropTypes.func,\n  onInputValueChange: PropTypes.func,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any,\n    }),\n  }),\n}\n\n/**\n * The useCombobox version of useControlledReducer, which also\n * checks if the controlled prop selectedItem changed between\n * renders. If so, it will also update inputValue with its\n * string equivalent. It uses the common useEnhancedReducer to\n * compute the rest of the state.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @returns {Array} An array with the state and an action dispatcher.\n */\nexport function useControlledReducer(reducer, initialState, props) {\n  const previousSelectedItemRef = useRef()\n  const [state, dispatch] = useEnhancedReducer(reducer, initialState, props)\n\n  // ToDo: if needed, make same approach as selectedItemChanged from Downshift.\n  if (isControlledProp(props, 'selectedItem')) {\n    if (previousSelectedItemRef.current !== props.selectedItem) {\n      dispatch({\n        type: ControlledPropUpdatedSelectedItem,\n        inputValue: props.itemToString(props.selectedItem),\n      })\n    }\n\n    previousSelectedItemRef.current =\n      state.selectedItem === previousSelectedItemRef.current\n        ? props.selectedItem\n        : state.selectedItem\n  }\n\n  return [getState(state, props), dispatch]\n}\n\nexport const defaultProps = {\n  ...defaultPropsCommon,\n  getA11yStatusMessage,\n  circularNavigation: true,\n}\n","import {getHighlightedIndexOnOpen, getDefaultValue} from '../utils'\nimport {getNextWrappingIndex, getNextNonDisabledIndex} from '../../utils'\nimport * as stateChangeTypes from './stateChangeTypes'\n\n/* eslint-disable complexity */\nexport default function downshiftUseComboboxReducer(state, action) {\n  const {type, props, shiftKey} = action\n  let changes\n\n  switch (type) {\n    case stateChangeTypes.ItemMouseMove:\n      changes = {\n        highlightedIndex: action.index,\n      }\n      break\n    case stateChangeTypes.ItemClick:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        selectedItem: props.items[action.index],\n        inputValue: props.itemToString(props.items[action.index]),\n      }\n      break\n    case stateChangeTypes.InputKeyDownArrowDown:\n      if (state.isOpen) {\n        changes = {\n          highlightedIndex: getNextWrappingIndex(\n            shiftKey ? 5 : 1,\n            state.highlightedIndex,\n            props.items.length,\n            action.getItemNodeFromIndex,\n            props.circularNavigation,\n          ),\n        }\n      } else {\n        changes = {\n          highlightedIndex: getHighlightedIndexOnOpen(\n            props,\n            state,\n            1,\n            action.getItemNodeFromIndex,\n          ),\n          isOpen: true,\n        }\n      }\n      break\n    case stateChangeTypes.InputKeyDownArrowUp:\n      if (state.isOpen) {\n        changes = {\n          highlightedIndex: getNextWrappingIndex(\n            shiftKey ? -5 : -1,\n            state.highlightedIndex,\n            props.items.length,\n            action.getItemNodeFromIndex,\n            props.circularNavigation,\n          ),\n        }\n      } else {\n        changes = {\n          highlightedIndex: getHighlightedIndexOnOpen(\n            props,\n            state,\n            -1,\n            action.getItemNodeFromIndex,\n          ),\n          isOpen: true,\n        }\n      }\n      break\n    case stateChangeTypes.InputKeyDownEnter:\n      changes = {\n        ...(state.highlightedIndex >= 0 && {\n          selectedItem: props.items[state.highlightedIndex],\n          isOpen: getDefaultValue(props, 'isOpen'),\n          highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n          inputValue: props.itemToString(props.items[state.highlightedIndex]),\n        }),\n      }\n      break\n    case stateChangeTypes.InputKeyDownEscape:\n      changes = {\n        isOpen: false,\n        selectedItem: null,\n        highlightedIndex: -1,\n        inputValue: '',\n      }\n      break\n    case stateChangeTypes.InputKeyDownHome:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(\n          1,\n          0,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          false,\n        ),\n      }\n      break\n    case stateChangeTypes.InputKeyDownEnd:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(\n          -1,\n          props.items.length - 1,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          false,\n        ),\n      }\n      break\n    case stateChangeTypes.InputBlur:\n      changes = {\n        isOpen: false,\n        ...(state.highlightedIndex >= 0 && {\n          selectedItem: props.items[state.highlightedIndex],\n          inputValue: props.itemToString(props.items[state.highlightedIndex]),\n          highlightedIndex: -1,\n        }),\n      }\n      break\n    case stateChangeTypes.InputChange:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        inputValue: action.inputValue,\n      }\n      break\n    case stateChangeTypes.MenuMouseLeave:\n      changes = {\n        highlightedIndex: -1,\n      }\n      break\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen,\n        highlightedIndex: state.isOpen\n          ? -1\n          : getHighlightedIndexOnOpen(props, state, 0),\n      }\n      break\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getHighlightedIndexOnOpen(props, state, 0),\n      }\n      break\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false,\n      }\n      break\n    case stateChangeTypes.FunctionSetHighlightedIndex:\n      changes = {\n        highlightedIndex: action.highlightedIndex,\n      }\n      break\n    case stateChangeTypes.FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n      }\n      break\n    case stateChangeTypes.ControlledPropUpdatedSelectedItem:\n    case stateChangeTypes.FunctionSetInputValue:\n      changes = {\n        inputValue: action.inputValue,\n      }\n      break\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: getDefaultValue(props, 'selectedItem'),\n        inputValue: getDefaultValue(props, 'inputValue'),\n      }\n      break\n    default:\n      throw new Error('Reducer called without proper action type.')\n  }\n\n  return {\n    ...state,\n    ...changes,\n  }\n}\n/* eslint-enable complexity */\n","/* eslint-disable max-statements */\nimport {useRef, useEffect} from 'react'\nimport {isPreact, isReactNative} from '../../is.macro'\nimport {handleRefs, normalizeArrowKey, callAllEventHandlers} from '../../utils'\nimport {\n  getItemIndex,\n  getPropTypesValidator,\n  updateA11yStatus,\n  useMouseAndTouchTracker,\n} from '../utils'\nimport {\n  getInitialState,\n  propTypes,\n  defaultProps,\n  getElementIds,\n  useControlledReducer,\n} from './utils'\nimport downshiftUseComboboxReducer from './reducer'\nimport * as stateChangeTypes from './stateChangeTypes'\n\nconst validatePropTypes =\n  process.env.NODE_ENV === 'production'\n    ? /* istanbul ignore next */ null\n    : getPropTypesValidator(useCombobox, propTypes)\n\nuseCombobox.stateChangeTypes = stateChangeTypes\n\nfunction useCombobox(userProps = {}) {\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    validatePropTypes(userProps)\n  }\n  // Props defaults and destructuring.\n  const props = {\n    ...defaultProps,\n    ...userProps,\n  }\n  const {\n    initialIsOpen,\n    defaultIsOpen,\n    items,\n    scrollIntoView,\n    environment,\n    getA11yStatusMessage,\n    getA11ySelectionMessage,\n    itemToString,\n  } = props\n  // Initial state depending on controlled props.\n  const initialState = getInitialState(props)\n\n  // Reducer init.\n  const [\n    {isOpen, highlightedIndex, selectedItem, inputValue},\n    dispatch,\n  ] = useControlledReducer(downshiftUseComboboxReducer, initialState, props)\n\n  /* Refs */\n  const menuRef = useRef(null)\n  const itemRefs = useRef()\n  const inputRef = useRef(null)\n  const toggleButtonRef = useRef(null)\n  const comboboxRef = useRef(null)\n  itemRefs.current = []\n  const shouldScroll = useRef(true)\n  const isInitialMount = useRef(true)\n  const elementIds = useRef(getElementIds(props))\n  const previousResultCountRef = useRef()\n\n  /* Effects */\n  /* Sets a11y status message on changes in state. */\n  useEffect(() => {\n    if (isInitialMount.current) {\n      return\n    }\n\n    const previousResultCount = previousResultCountRef.current\n\n    updateA11yStatus(\n      () =>\n        getA11yStatusMessage({\n          isOpen,\n          highlightedIndex,\n          selectedItem,\n          inputValue,\n          highlightedItem: items[highlightedIndex],\n          resultCount: items.length,\n          itemToString,\n          previousResultCount,\n        }),\n      environment.document,\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen, highlightedIndex, selectedItem, inputValue])\n  /* Sets a11y status message on changes in selectedItem. */\n  useEffect(() => {\n    if (isInitialMount.current) {\n      return\n    }\n\n    const previousResultCount = previousResultCountRef.current\n\n    updateA11yStatus(\n      () =>\n        getA11ySelectionMessage({\n          isOpen,\n          highlightedIndex,\n          selectedItem,\n          inputValue,\n          highlightedItem: items[highlightedIndex],\n          resultCount: items.length,\n          itemToString,\n          previousResultCount,\n        }),\n      environment.document,\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedItem])\n  /* Scroll on highlighted item if change comes from keyboard. */\n  useEffect(() => {\n    if (highlightedIndex < 0 || !isOpen || !itemRefs.current.length) {\n      return\n    }\n\n    if (shouldScroll.current === false) {\n      shouldScroll.current = true\n    } else {\n      scrollIntoView(itemRefs.current[highlightedIndex], menuRef.current)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [highlightedIndex])\n  /* Controls the focus on the menu or the toggle button. */\n  useEffect(() => {\n    // Don't focus menu on first render.\n    if (isInitialMount.current) {\n      // Unless it was initialised as open.\n      if (initialIsOpen || defaultIsOpen || isOpen) {\n        if (inputRef.current) {\n          inputRef.current.focus()\n        }\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen])\n  useEffect(() => {\n    if (isInitialMount.current) {\n      return\n    }\n\n    previousResultCountRef.current = items.length\n  })\n  useEffect(() => {\n    isInitialMount.current = false\n  }, [])\n  /* Add mouse/touch events to document. */\n  const mouseAndTouchTrackersRef = useMouseAndTouchTracker(\n    isOpen,\n    [comboboxRef, menuRef, toggleButtonRef],\n    environment,\n    () => {\n      dispatch({\n        type: stateChangeTypes.InputBlur,\n      })\n    },\n  )\n\n  const getItemNodeFromIndex = index => itemRefs.current[index]\n\n  /* Event handler functions */\n  const inputKeyDownHandlers = {\n    ArrowDown(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.InputKeyDownArrowDown,\n        shiftKey: event.shiftKey,\n        getItemNodeFromIndex,\n      })\n    },\n    ArrowUp(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.InputKeyDownArrowUp,\n        shiftKey: event.shiftKey,\n        getItemNodeFromIndex,\n      })\n    },\n    Home(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.InputKeyDownHome,\n        getItemNodeFromIndex,\n      })\n    },\n    End(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.InputKeyDownEnd,\n        getItemNodeFromIndex,\n      })\n    },\n    Escape() {\n      dispatch({\n        type: stateChangeTypes.InputKeyDownEscape,\n      })\n    },\n    Enter(event) {\n      // if IME composing, wait for next Enter keydown event.\n      if (event.which === 229) {\n        return\n      }\n\n      if (isOpen && highlightedIndex > -1) {\n        event.preventDefault()\n        dispatch({\n          type: stateChangeTypes.InputKeyDownEnter,\n          getItemNodeFromIndex,\n        })\n      }\n    },\n  }\n\n  // Event handlers.\n  const inputHandleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (key && inputKeyDownHandlers[key]) {\n      inputKeyDownHandlers[key](event)\n    }\n  }\n  const inputHandleChange = event => {\n    dispatch({\n      type: stateChangeTypes.InputChange,\n      inputValue: isReactNative\n        ? /* istanbul ignore next (react-native) */ event.nativeEvent.text\n        : event.target.value,\n    })\n  }\n  const inputHandleBlur = () => {\n    /* istanbul ignore else */\n    if (!mouseAndTouchTrackersRef.current.isMouseDown) {\n      dispatch({\n        type: stateChangeTypes.InputBlur,\n      })\n    }\n  }\n  const menuHandleMouseLeave = () => {\n    dispatch({\n      type: stateChangeTypes.MenuMouseLeave,\n    })\n  }\n  const itemHandleMouseMove = index => {\n    if (index === highlightedIndex) {\n      return\n    }\n    shouldScroll.current = false\n    dispatch({\n      type: stateChangeTypes.ItemMouseMove,\n      index,\n    })\n  }\n  const itemHandleClick = index => {\n    dispatch({\n      type: stateChangeTypes.ItemClick,\n      index,\n    })\n  }\n  const toggleButtonHandleClick = () => {\n    dispatch({\n      type: stateChangeTypes.ToggleButtonClick,\n    })\n\n    if (!isOpen && inputRef.current) {\n      inputRef.current.focus()\n    }\n  }\n\n  // Getter props.\n  const getLabelProps = labelProps => ({\n    id: elementIds.current.labelId,\n    htmlFor: elementIds.current.inputId,\n    ...labelProps,\n  })\n  const getMenuProps = ({onMouseLeave, refKey = 'ref', ref, ...rest} = {}) => ({\n    [refKey]: handleRefs(ref, menuNode => {\n      menuRef.current = menuNode\n    }),\n    id: elementIds.current.menuId,\n    role: 'listbox',\n    'aria-labelledby': elementIds.current.labelId,\n    onMouseLeave: callAllEventHandlers(onMouseLeave, menuHandleMouseLeave),\n    ...rest,\n  })\n  const getItemProps = ({\n    item,\n    index,\n    refKey = 'ref',\n    ref,\n    onMouseMove,\n    onClick,\n    onPress,\n    ...rest\n  } = {}) => {\n    const itemIndex = getItemIndex(index, item, items)\n    if (itemIndex < 0) {\n      throw new Error('Pass either item or item index in getItemProps!')\n    }\n\n    const onSelectKey = isReactNative\n      ? /* istanbul ignore next (react-native) */ 'onPress'\n      : 'onClick'\n    const customClickHandler = isReactNative\n      ? /* istanbul ignore next (react-native) */ onPress\n      : onClick\n\n    return {\n      [refKey]: handleRefs(ref, itemNode => {\n        if (itemNode) {\n          itemRefs.current.push(itemNode)\n        }\n      }),\n      role: 'option',\n      'aria-selected': `${itemIndex === highlightedIndex}`,\n      id: elementIds.current.getItemId(itemIndex),\n      ...(!rest.disabled && {\n        onMouseMove: callAllEventHandlers(onMouseMove, () => {\n          itemHandleMouseMove(itemIndex)\n        }),\n        [onSelectKey]: callAllEventHandlers(customClickHandler, () => {\n          itemHandleClick(itemIndex)\n        }),\n      }),\n      ...rest,\n    }\n  }\n  const getToggleButtonProps = ({\n    onClick,\n    onPress,\n    refKey = 'ref',\n    ref,\n    ...rest\n  } = {}) => {\n    return {\n      [refKey]: handleRefs(ref, toggleButtonNode => {\n        toggleButtonRef.current = toggleButtonNode\n      }),\n      id: elementIds.current.toggleButtonId,\n      tabIndex: -1,\n      ...(!rest.disabled && {\n        ...(isReactNative\n          ? /* istanbul ignore next (react-native) */ {\n              onPress: callAllEventHandlers(onPress, toggleButtonHandleClick),\n            }\n          : {onClick: callAllEventHandlers(onClick, toggleButtonHandleClick)}),\n      }),\n      ...rest,\n    }\n  }\n  const getInputProps = ({\n    onKeyDown,\n    onChange,\n    onInput,\n    onBlur,\n    onChangeText,\n    refKey = 'ref',\n    ref,\n    ...rest\n  } = {}) => {\n    /* istanbul ignore next (preact) */\n    const onChangeKey = isPreact ? 'onInput' : 'onChange'\n    let eventHandlers = {}\n\n    if (!rest.disabled) {\n      eventHandlers = {\n        [onChangeKey]: callAllEventHandlers(\n          onChange,\n          onInput,\n          inputHandleChange,\n        ),\n        onKeyDown: callAllEventHandlers(onKeyDown, inputHandleKeyDown),\n        onBlur: callAllEventHandlers(onBlur, inputHandleBlur),\n      }\n    }\n\n    /* istanbul ignore if (react-native) */\n    if (isReactNative) {\n      eventHandlers.onChange = callAllEventHandlers(\n        onChange,\n        onInput,\n        inputHandleChange,\n      )\n      eventHandlers.onChangeText = callAllEventHandlers(\n        onChangeText,\n        onInput,\n        text => {\n          inputHandleChange({nativeEvent: {text}})\n        },\n      )\n    }\n\n    return {\n      [refKey]: handleRefs(ref, inputNode => {\n        inputRef.current = inputNode\n      }),\n      id: elementIds.current.inputId,\n      'aria-autocomplete': 'list',\n      'aria-controls': elementIds.current.menuId,\n      ...(isOpen &&\n        highlightedIndex > -1 && {\n          'aria-activedescendant': elementIds.current.getItemId(\n            highlightedIndex,\n          ),\n        }),\n      'aria-labelledby': elementIds.current.labelId,\n      // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\n      // revert back since autocomplete=\"nope\" is ignored on latest Chrome and Opera\n      autoComplete: 'off',\n      value: inputValue,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n  const getComboboxProps = ({refKey = 'ref', ref, ...rest} = {}) => ({\n    [refKey]: handleRefs(ref, comboboxNode => {\n      comboboxRef.current = comboboxNode\n    }),\n    role: 'combobox',\n    'aria-haspopup': 'listbox',\n    'aria-owns': elementIds.current.menuId,\n    'aria-expanded': isOpen,\n    ...rest,\n  })\n\n  // returns\n  const toggleMenu = () => {\n    dispatch({\n      type: stateChangeTypes.FunctionToggleMenu,\n    })\n  }\n  const closeMenu = () => {\n    dispatch({\n      type: stateChangeTypes.FunctionCloseMenu,\n    })\n  }\n  const openMenu = () => {\n    dispatch({\n      type: stateChangeTypes.FunctionOpenMenu,\n    })\n  }\n  const setHighlightedIndex = newHighlightedIndex => {\n    dispatch({\n      type: stateChangeTypes.FunctionSetHighlightedIndex,\n      highlightedIndex: newHighlightedIndex,\n    })\n  }\n  const selectItem = newSelectedItem => {\n    dispatch({\n      type: stateChangeTypes.FunctionSelectItem,\n      selectedItem: newSelectedItem,\n    })\n  }\n  const setInputValue = newInputValue => {\n    dispatch({\n      type: stateChangeTypes.FunctionSetInputValue,\n      inputValue: newInputValue,\n    })\n  }\n  const reset = () => {\n    dispatch({\n      type: stateChangeTypes.FunctionReset,\n    })\n  }\n\n  return {\n    // prop getters.\n    getItemProps,\n    getLabelProps,\n    getMenuProps,\n    getInputProps,\n    getComboboxProps,\n    getToggleButtonProps,\n    // actions.\n    toggleMenu,\n    openMenu,\n    closeMenu,\n    setHighlightedIndex,\n    setInputValue,\n    selectItem,\n    reset,\n    // state.\n    highlightedIndex,\n    isOpen,\n    selectedItem,\n    inputValue,\n  }\n}\n\nexport default useCombobox\n","import PropTypes from 'prop-types'\nimport {\n  getInitialValue as getInitialValueCommon,\n  getDefaultValue as getDefaultValueCommon,\n  defaultProps as defaultPropsCommon,\n} from '../utils'\n\nconst defaultStateValues = {\n  activeIndex: -1,\n  selectedItems: [],\n}\n\n/**\n * Returns the initial value for a state key in the following order:\n * 1. controlled prop, 2. initial prop, 3. default prop, 4. default\n * value from Downshift.\n *\n * @param {Object} props Props passed to the hook.\n * @param {string} propKey Props key to generate the value for.\n * @returns {any} The initial value for that prop.\n */\nfunction getInitialValue(props, propKey) {\n  return getInitialValueCommon(props, propKey, defaultStateValues)\n}\n\n/**\n * Returns the default value for a state key in the following order:\n * 1. controlled prop, 2. default prop, 3. default value from Downshift.\n *\n * @param {Object} props Props passed to the hook.\n * @param {string} propKey Props key to generate the value for.\n * @returns {any} The initial value for that prop.\n */\nexport function getDefaultValue(props, propKey) {\n  return getDefaultValueCommon(props, propKey, defaultStateValues)\n}\n\n/**\n * Gets the initial state based on the provided props. It uses initial, default\n * and controlled props related to state in order to compute the initial value.\n *\n * @param {Object} props Props passed to the hook.\n * @returns {Object} The initial state.\n */\nexport function getInitialState(props) {\n  const activeIndex = getInitialValue(props, 'activeIndex')\n  const selectedItems = getInitialValue(props, 'selectedItems')\n\n  return {\n    activeIndex,\n    selectedItems,\n  }\n}\n\n/**\n * Returns true if dropdown keydown operation is permitted. Should not be\n * allowed on keydown with modifier keys (ctrl, alt, shift, meta), on\n * input element with text content that is either highlighted or selection\n * cursor is not at the starting position.\n *\n * @param {KeyboardEvent} event The event from keydown.\n * @returns {boolean} Whether the operation is allowed.\n */\nexport function isKeyDownOperationPermitted(event) {\n  if (event.shiftKey || event.metaKey || event.ctrlKey || event.altKey) {\n    return false\n  }\n\n  const element = event.target\n\n  if (\n    element instanceof HTMLInputElement && // if element is a text input\n    element.value !== '' && // and we have text in it\n    // and cursor is either not at the start or is currently highlighting text.\n    (element.selectionStart !== 0 || element.selectionEnd !== 0)\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Returns a message to be added to aria-live region when item is removed.\n *\n * @param {Object} selectionParameters Parameters required to build the message.\n * @returns {string} The a11y message.\n */\nfunction getA11yRemovalMessage(selectionParameters) {\n  const {\n    removedSelectedItem,\n    itemToString: itemToStringLocal,\n  } = selectionParameters\n\n  return `${itemToStringLocal(removedSelectedItem)} has been removed.`\n}\n\nexport const propTypes = {\n  selectedItems: PropTypes.array,\n  initialSelectedItems: PropTypes.array,\n  defaultSelectedItems: PropTypes.array,\n  itemToString: PropTypes.func,\n  getA11yRemovalMessage: PropTypes.func,\n  stateReducer: PropTypes.func,\n  activeIndex: PropTypes.number,\n  initialActiveIndex: PropTypes.number,\n  defaultActiveIndex: PropTypes.number,\n  onActiveIndexChange: PropTypes.func,\n  onSelectedItemsChange: PropTypes.func,\n  keyNavigationNext: PropTypes.string,\n  keyNavigationPrevious: PropTypes.string,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any,\n    }),\n  }),\n}\n\nexport const defaultProps = {\n  itemToString: defaultPropsCommon.itemToString,\n  stateReducer: defaultPropsCommon.stateReducer,\n  environment: defaultPropsCommon.environment,\n  getA11yRemovalMessage,\n  keyNavigationNext: 'ArrowRight',\n  keyNavigationPrevious: 'ArrowLeft',\n}\n","import {getDefaultValue} from './utils'\nimport * as stateChangeTypes from './stateChangeTypes'\n\n/* eslint-disable complexity */\nexport default function downshiftMultipleSelectionReducer(state, action) {\n  const {type, index, props, selectedItem} = action\n  const {activeIndex, selectedItems} = state\n  let changes\n\n  switch (type) {\n    case stateChangeTypes.SelectedItemClick:\n      changes = {\n        activeIndex: index,\n      }\n\n      break\n    case stateChangeTypes.SelectedItemKeyDownNavigationPrevious:\n      changes = {\n        activeIndex: activeIndex - 1 < 0 ? 0 : activeIndex - 1,\n      }\n\n      break\n    case stateChangeTypes.SelectedItemKeyDownNavigationNext:\n      changes = {\n        activeIndex:\n          activeIndex + 1 >= selectedItems.length ? -1 : activeIndex + 1,\n      }\n\n      break\n    case stateChangeTypes.SelectedItemKeyDownBackspace:\n    case stateChangeTypes.SelectedItemKeyDownDelete: {\n      let newActiveIndex = activeIndex\n\n      if (selectedItems.length === 1) {\n        newActiveIndex = -1\n      } else if (activeIndex === selectedItems.length - 1) {\n        newActiveIndex = selectedItems.length - 2\n      }\n\n      changes = {\n        selectedItems: [\n          ...selectedItems.slice(0, activeIndex),\n          ...selectedItems.slice(activeIndex + 1),\n        ],\n        ...{activeIndex: newActiveIndex},\n      }\n\n      break\n    }\n    case stateChangeTypes.DropdownKeyDownNavigationPrevious:\n      changes = {\n        activeIndex: selectedItems.length - 1,\n      }\n      break\n    case stateChangeTypes.DropdownKeyDownBackspace:\n      changes = {\n        selectedItems: selectedItems.slice(0, selectedItems.length - 1),\n      }\n      break\n    case stateChangeTypes.FunctionAddSelectedItem:\n      changes = {\n        selectedItems: [...selectedItems, selectedItem],\n      }\n      break\n    case stateChangeTypes.DropdownClick:\n      changes = {\n        activeIndex: -1,\n      }\n      break\n    case stateChangeTypes.FunctionRemoveSelectedItem: {\n      let newActiveIndex = activeIndex\n      const selectedItemIndex = selectedItems.indexOf(selectedItem)\n\n      if (selectedItems.length === 1) {\n        newActiveIndex = -1\n      } else if (selectedItemIndex === selectedItems.length - 1) {\n        newActiveIndex = selectedItems.length - 2\n      }\n\n      changes = {\n        selectedItems: [\n          ...selectedItems.slice(0, selectedItemIndex),\n          ...selectedItems.slice(selectedItemIndex + 1),\n        ],\n        ...{activeIndex: newActiveIndex},\n      }\n      break\n    }\n    case stateChangeTypes.FunctionSetSelectedItems: {\n      const {selectedItems: newSelectedItems} = action\n      changes = {\n        selectedItems: newSelectedItems,\n      }\n      break\n    }\n    case stateChangeTypes.FunctionSetActiveIndex: {\n      const {activeIndex: newActiveIndex} = action\n      changes = {\n        activeIndex: newActiveIndex,\n      }\n      break\n    }\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        activeIndex: getDefaultValue(props, 'activeIndex'),\n        selectedItems: getDefaultValue(props, 'selectedItems'),\n      }\n      break\n    default:\n      throw new Error('Reducer called without proper action type.')\n  }\n\n  return {\n    ...state,\n    ...changes,\n  }\n}\n","import {useRef, useEffect} from 'react'\nimport setStatus from '../../set-a11y-status'\nimport {handleRefs, callAllEventHandlers, normalizeArrowKey} from '../../utils'\nimport {useControlledReducer, getItemIndex} from '../utils'\nimport {\n  getInitialState,\n  defaultProps,\n  isKeyDownOperationPermitted,\n} from './utils'\nimport downshiftMultipleSelectionReducer from './reducer'\nimport * as stateChangeTypes from './stateChangeTypes'\n\nuseMultipleSelection.stateChangeTypes = stateChangeTypes\n\nfunction useMultipleSelection(userProps = {}) {\n  // Props defaults and destructuring.\n  const props = {\n    ...defaultProps,\n    ...userProps,\n  }\n  const {\n    getA11yRemovalMessage,\n    itemToString,\n    environment,\n    keyNavigationNext,\n    keyNavigationPrevious,\n  } = props\n\n  // Reducer init.\n  const [{activeIndex, selectedItems}, dispatch] = useControlledReducer(\n    downshiftMultipleSelectionReducer,\n    getInitialState(props),\n    props,\n  )\n\n  // Refs.\n  const isInitialMount = useRef(true)\n  const dropdownRef = useRef(null)\n  const previousSelectedItemsRef = useRef(selectedItems)\n  const selectedItemRefs = useRef()\n  selectedItemRefs.current = []\n\n  // Effects.\n  /* Sets a11y status message on changes in selectedItem. */\n  useEffect(() => {\n    if (isInitialMount.current) {\n      return\n    }\n\n    if (selectedItems.length < previousSelectedItemsRef.current.length) {\n      const removedSelectedItem = previousSelectedItemsRef.current.find(\n        item => selectedItems.indexOf(item) < 0,\n      )\n\n      setStatus(\n        getA11yRemovalMessage({\n          itemToString,\n          resultCount: selectedItems.length,\n          removedSelectedItem,\n          activeIndex,\n          activeSelectedItem: selectedItems[activeIndex],\n        }),\n        environment.document,\n      )\n    }\n\n    previousSelectedItemsRef.current = selectedItems\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedItems.length])\n  // Sets focus on active item.\n  useEffect(() => {\n    if (isInitialMount.current) {\n      return\n    }\n\n    if (activeIndex === -1 && dropdownRef.current) {\n      dropdownRef.current.focus()\n    } else if (selectedItemRefs.current[activeIndex]) {\n      selectedItemRefs.current[activeIndex].focus()\n    }\n  }, [activeIndex])\n  // Make initial ref false.\n  useEffect(() => {\n    isInitialMount.current = false\n  }, [])\n\n  // Event handler functions.\n  const selectedItemKeyDownHandlers = {\n    [keyNavigationPrevious]() {\n      dispatch({\n        type: stateChangeTypes.SelectedItemKeyDownNavigationPrevious,\n      })\n    },\n    [keyNavigationNext]() {\n      dispatch({\n        type: stateChangeTypes.SelectedItemKeyDownNavigationNext,\n      })\n    },\n    Delete() {\n      dispatch({\n        type: stateChangeTypes.SelectedItemKeyDownDelete,\n      })\n    },\n    Backspace() {\n      dispatch({\n        type: stateChangeTypes.SelectedItemKeyDownBackspace,\n      })\n    },\n  }\n  const dropdownKeyDownHandlers = {\n    [keyNavigationPrevious](event) {\n      if (isKeyDownOperationPermitted(event)) {\n        dispatch({\n          type: stateChangeTypes.DropdownKeyDownNavigationPrevious,\n        })\n      }\n    },\n    Backspace(event) {\n      if (isKeyDownOperationPermitted(event)) {\n        dispatch({\n          type: stateChangeTypes.DropdownKeyDownBackspace,\n        })\n      }\n    },\n  }\n\n  // Event handlers.\n  const selectedItemHandleClick = index => {\n    dispatch({\n      type: stateChangeTypes.SelectedItemClick,\n      index,\n    })\n  }\n  const selectedItemHandleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (key && selectedItemKeyDownHandlers[key]) {\n      selectedItemKeyDownHandlers[key](event)\n    }\n  }\n  const dropdownHandleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (key && dropdownKeyDownHandlers[key]) {\n      dropdownKeyDownHandlers[key](event)\n    }\n  }\n  const dropdownHandleClick = () => {\n    dispatch({\n      type: stateChangeTypes.DropdownClick,\n    })\n  }\n\n  // Getter props.\n  const getSelectedItemProps = ({\n    refKey = 'ref',\n    ref,\n    onClick,\n    onKeyDown,\n    selectedItem,\n    index,\n    ...rest\n  } = {}) => {\n    const itemIndex = getItemIndex(index, selectedItem, selectedItems)\n    if (itemIndex < 0) {\n      throw new Error(\n        'Pass either selectedItem or index in getSelectedItemProps!',\n      )\n    }\n\n    return {\n      [refKey]: handleRefs(ref, selectedItemNode => {\n        if (selectedItemNode) {\n          selectedItemRefs.current.push(selectedItemNode)\n        }\n      }),\n      tabIndex: index === activeIndex ? 0 : -1,\n      onClick: callAllEventHandlers(onClick, () => {\n        selectedItemHandleClick(index)\n      }),\n      onKeyDown: callAllEventHandlers(onKeyDown, selectedItemHandleKeyDown),\n      ...rest,\n    }\n  }\n  const getDropdownProps = ({\n    refKey = 'ref',\n    ref,\n    onKeyDown,\n    onClick,\n    preventKeyAction = false,\n    ...rest\n  } = {}) => ({\n    [refKey]: handleRefs(ref, dropdownNode => {\n      if (dropdownNode) {\n        dropdownRef.current = dropdownNode\n      }\n    }),\n    ...(!preventKeyAction && {\n      onKeyDown: callAllEventHandlers(onKeyDown, dropdownHandleKeyDown),\n      onClick: callAllEventHandlers(onClick, dropdownHandleClick),\n    }),\n    ...rest,\n  })\n\n  // returns\n  const addSelectedItem = selectedItem => {\n    dispatch({\n      type: stateChangeTypes.FunctionAddSelectedItem,\n      selectedItem,\n    })\n  }\n  const removeSelectedItem = selectedItem => {\n    dispatch({\n      type: stateChangeTypes.FunctionRemoveSelectedItem,\n      selectedItem,\n    })\n  }\n  const setSelectedItems = newSelectedItems => {\n    dispatch({\n      type: stateChangeTypes.FunctionSetSelectedItems,\n      selectedItems: newSelectedItems,\n    })\n  }\n  const setActiveIndex = newActiveIndex => {\n    dispatch({\n      type: stateChangeTypes.FunctionSetActiveIndex,\n      activeIndex: newActiveIndex,\n    })\n  }\n  const reset = () => {\n    dispatch({\n      type: stateChangeTypes.FunctionReset,\n    })\n  }\n\n  return {\n    getSelectedItemProps,\n    getDropdownProps,\n    addSelectedItem,\n    removeSelectedItem,\n    setSelectedItems,\n    setActiveIndex,\n    reset,\n    selectedItems,\n    activeIndex,\n  }\n}\n\nexport default useMultipleSelection\n"],"names":["_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","_extends","assign","arguments","prototype","hasOwnProperty","call","apply","this","_assertThisInitialized","self","ReferenceError","b","Symbol","for","c","d","e","f","g","h","k","l","m","n","p","q","r","t","v","w","x","y","z","a","u","$$typeof","type","A","module","require$$0","isElement","el","nodeType","canOverflow","overflow","skipOverflowHiddenElements","isScrollable","clientHeight","scrollHeight","clientWidth","scrollWidth","style","getComputedStyle","overflowY","overflowX","frame","ownerDocument","defaultView","frameElement","getFrameElement","isHiddenByFrame","alignNearest","scrollingEdgeStart","scrollingEdgeEnd","scrollingSize","scrollingBorderStart","scrollingBorderEnd","elementEdgeStart","elementEdgeEnd","elementSize","idCounter","cbToCb","cb","noop","scrollIntoView","node","menuNode","options","scrollMode","block","inline","boundary","checkBoundary","TypeError","scrollingElement","document","documentElement","frames","cursor","parentNode","push","body","viewportWidth","window","visualViewport","width","innerWidth","viewportHeight","height","innerHeight","viewportX","scrollX","pageXOffset","viewportY","scrollY","pageYOffset","_target$getBoundingCl","getBoundingClientRect","targetHeight","targetWidth","targetTop","top","targetRight","right","targetBottom","bottom","targetLeft","left","targetBlock","targetInline","computations","index","_frame$getBoundingCli","frameStyle","borderLeft","parseInt","borderLeftWidth","borderTop","borderTopWidth","borderRight","borderRightWidth","borderBottom","borderBottomWidth","blockScroll","inlineScroll","scrollbarWidth","offsetWidth","scrollbarHeight","offsetHeight","Math","max","scrollLeft","scrollTop","min","computeScrollIntoView","forEach","isOrContainsNode","parent","child","contains","debounce","fn","time","timeoutId","cancel","clearTimeout","wrapper","args","setTimeout","callAllEventHandlers","fns","event","some","preventDownshiftDefault","nativeEvent","handleRefs","refs","ref","current","generateId","String","getA11yStatusMessage","isOpen","resultCount","previousResultCount","unwrapArray","arg","defaultValue","Array","isArray","stateKeys","pickState","state","result","getState","props","reduce","prevState","isControlledProp","undefined","normalizeArrowKey","keyCode","getNextWrappingIndex","moveAmount","baseIndex","itemCount","getItemNodeFromIndex","circular","itemsLastIndex","newIndex","nonDisabledNewIndex","getNextNonDisabledIndex","currentElementNode","hasAttribute","targetWithinDownshift","downshiftElements","checkActiveElement","contextNode","activeElement","cleanupStatus","getStatusDiv","textContent","setStatus","status","documentProp","div","statusDiv","getElementById","createElement","setAttribute","border","clip","margin","padding","position","appendChild","Downshift","subClass","superClass","_Component","id","_this","menuId","labelId","inputId","getItemId","input","items","timeoutIds","internalSetTimeout","filter","setItemCount","count","unsetItemCount","setHighlightedIndex","highlightedIndex","otherStateToSet","defaultHighlightedIndex","internalSetState","clearSelection","selectedItem","inputValue","defaultIsOpen","selectItem","item","itemToString","selectItemAtIndex","itemIndex","selectHighlightedItem","stateToSet","isItemSelected","onChangeArg","onStateChangeArg","isStateToSetFunction","onInputValueChange","getStateAndHelpers","setState","newStateToSet","stateReducer","nextState","nextFullState","onStateChange","onSelect","onChange","onUserAction","rootRef","_rootNode","getRootProps","refKey","rest","suppressRefError","called","role","keyDownHandlers","ArrowDown","preventDefault","amount","shiftKey","moveHighlightedIndex","_this2","getItemCount","nextHighlightedIndex","ArrowUp","_this3","Enter","which","itemNode","Escape","reset","buttonKeyDownHandlers","toggleMenu","inputKeyDownHandlers","Home","newHighlightedIndex","_this4","End","_this5","getToggleButtonProps","onClick","onKeyDown","onPress","onKeyUp","onBlur","enabledEventHandlers","buttonHandleClick","buttonHandleKeyDown","buttonHandleKeyUp","buttonHandleBlur","disabled","environment","focus","blurTarget","isMouseDown","getLabelProps","htmlFor","getInputProps","onInput","onChangeText","eventHandlers","inputHandleChange","inputHandleKeyDown","inputHandleBlur","autoComplete","value","downshiftButtonIsActive","dataset","toggle","menuRef","_menuNode","getMenuProps","getItemProps","onMouseMove","onMouseDown","customClickHandler","avoidScrolling","clearItems","openMenu","closeMenu","updateStatus","highlightedItem","setA11yStatus","initialHighlightedIndex","initialIsOpen","initialInputValue","initialSelectedItem","create","constructor","__proto__","internalClearTimeouts","stateToMerge","scrollHighlightedItemIntoView","_this6","componentDidMount","_this7","onMouseUp","onOuterClick","onTouchStart","isTouchMove","onTouchMove","onTouchEnd","contextWithinDownshift","addEventListener","cleanup","removeEventListener","shouldScroll","prevProps","currentHighlightedIndex","prevHighlightedIndex","componentDidUpdate","selectedItemChanged","componentWillUnmount","render","children","element","nodeName","isDOMElement","cloneElement","attributes","getElementProps","Component","defaultProps","prevItem","stateChangeTypes","dropdownDefaultStateValues","callOnChangeProps","action","newState","changes","handler","capitalizeString","invokeOnChangeHandler","updateA11yStatus","getA11yMessage","getElementIds","toggleButtonId","uniqueId","getItemIndex","isAcceptedCharacterKey","test","string","slice","toUpperCase","useEnhancedReducer","reducer","initialState","prevStateRef","useRef","actionRef","enhancedReducer","useCallback","useReducer","dispatch","useEffect","useControlledReducer","s","getA11ySelectionMessage","selectionParameters","itemToStringLocal","circularNavigation","getDefaultValue","propKey","defaultStateValues","defaultPropKey","getInitialValue","initialPropKey","getInitialState","getHighlightedIndexOnOpen","offset","useMouseAndTouchTracker","downshiftElementRefs","handleBlur","mouseAndTouchTrackersRef","map","getItemIndexByCharacterKey","keysSoFar","itemToStringParam","lowerCasedItemStrings","toLowerCase","lowerCasedKeysSoFar","isValid","itemString","startsWith","PropTypes","array","isRequired","func","bool","number","any","shape","commonDefaultProps","downshiftSelectReducer","lowercasedKey","Error","useSelect","userProps","toggleButtonRef","isInitialMountRef","shouldScrollRef","shouldBlurRef","clearTimeoutRef","elementIdsRef","previousResultCountRef","outerDispatch","toggleButtonKeyDownHandlers","menuKeyDownHandlers","menuHandleKeyDown","menuHandleBlur","menuHandleMouseLeave","toggleButtonHandleClick","toggleButtonHandleKeyDown","toggleProps","toggleButtonNode","labelProps","onMouseLeave","tabIndex","itemProps","itemHandleMouseMove","itemHandleClick","newSelectedItem","setInputValue","newInputValue","defaultPropsCommon","downshiftUseComboboxReducer","useCombobox","previousSelectedItemRef","getInitialStateCommon","defaultInputValue","itemRefs","inputRef","comboboxRef","isInitialMount","elementIds","getElementIdsCommon","inputNode","getComboboxProps","comboboxNode","activeIndex","selectedItems","getInitialValueCommon","getDefaultValueCommon","isKeyDownOperationPermitted","metaKey","ctrlKey","altKey","HTMLInputElement","selectionStart","selectionEnd","getA11yRemovalMessage","removedSelectedItem","keyNavigationNext","keyNavigationPrevious","downshiftMultipleSelectionReducer","newActiveIndex","selectedItemIndex","useMultipleSelection","dropdownRef","previousSelectedItemsRef","selectedItemRefs","find","activeSelectedItem","selectedItemKeyDownHandlers","Delete","Backspace","dropdownKeyDownHandlers","selectedItemHandleKeyDown","dropdownHandleKeyDown","dropdownHandleClick","getSelectedItemProps","selectedItemNode","selectedItemHandleClick","getDropdownProps","preventKeyAction","dropdownNode","addSelectedItem","removeSelectedItem","setSelectedItems","newSelectedItems","setActiveIndex"],"mappings":"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"}